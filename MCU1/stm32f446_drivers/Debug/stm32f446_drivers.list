
stm32f446_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001960  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001b24  08001b2c  00002b2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001b24  08001b24  00002b2c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001b24  08001b24  00002b2c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001b24  08001b2c  00002b2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b24  08001b24  00002b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001b28  08001b28  00002b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00002b2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000000  08001b2c  00003000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08001b2c  00003044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002b2c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c4c  00000000  00000000  00002b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009d3  00000000  00000000  000057a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000250  00000000  00000000  00006180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001b1  00000000  00000000  000063d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000024dd  00000000  00000000  00006581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003a68  00000000  00000000  00008a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008e30  00000000  00000000  0000c4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000152f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000854  00000000  00000000  0001533c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00015b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001b0c 	.word	0x08001b0c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08001b0c 	.word	0x08001b0c

08000204 <main>:
uint16_t new[4];
#define INC		82
TIM_Handle_t *pTIM2 ;
GPIO_Handle_t *pGPIO;
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b0a2      	sub	sp, #136	@ 0x88
 8000208:	af00      	add	r7, sp, #0
	SystemCLK_Config_84MHz();
 800020a:	f001 f881 	bl	8001310 <SystemCLK_Config_84MHz>

	SCB_CPACR |= ((3UL << 10*2) | (3UL << 11*2));
 800020e:	4b7f      	ldr	r3, [pc, #508]	@ (800040c <main+0x208>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a7e      	ldr	r2, [pc, #504]	@ (800040c <main+0x208>)
 8000214:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000218:	6013      	str	r3, [r2, #0]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 800021a:	2101      	movs	r1, #1
 800021c:	487c      	ldr	r0, [pc, #496]	@ (8000410 <main+0x20c>)
 800021e:	f000 fdfb 	bl	8000e18 <GPIO_PeriClockControl>
	GPIO_PeriClockControl(GPIOC, ENABLE);
 8000222:	2101      	movs	r1, #1
 8000224:	487b      	ldr	r0, [pc, #492]	@ (8000414 <main+0x210>)
 8000226:	f000 fdf7 	bl	8000e18 <GPIO_PeriClockControl>

	GPIO_Handle_t GpioPWM;
	pGPIO = &GpioPWM;
 800022a:	4a7b      	ldr	r2, [pc, #492]	@ (8000418 <main+0x214>)
 800022c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000230:	6013      	str	r3, [r2, #0]
	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000232:	2101      	movs	r1, #1
 8000234:	4876      	ldr	r0, [pc, #472]	@ (8000410 <main+0x20c>)
 8000236:	f000 fdef 	bl	8000e18 <GPIO_PeriClockControl>

	GpioPWM.pGPIOx = GPIOC;
 800023a:	4b76      	ldr	r3, [pc, #472]	@ (8000414 <main+0x210>)
 800023c:	67fb      	str	r3, [r7, #124]	@ 0x7c
	GpioPWM.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800023e:	2307      	movs	r3, #7
 8000240:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
	GpioPWM.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 8000244:	2301      	movs	r3, #1
 8000246:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
	GpioPWM.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800024a:	2302      	movs	r3, #2
 800024c:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
	GpioPWM.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000250:	2300      	movs	r3, #0
 8000252:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
	GpioPWM.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000256:	2300      	movs	r3, #0
 8000258:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
	GPIO_Init(&GpioPWM);
 800025c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000260:	4618      	mov	r0, r3
 8000262:	f000 fea9 	bl	8000fb8 <GPIO_Init>

    GPIO_Handle_t ADCIn_0;
    ADCIn_0.pGPIOx = GPIOA;
 8000266:	4b6a      	ldr	r3, [pc, #424]	@ (8000410 <main+0x20c>)
 8000268:	673b      	str	r3, [r7, #112]	@ 0x70
    ADCIn_0.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 800026a:	2303      	movs	r3, #3
 800026c:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
    ADCIn_0.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000270:	2300      	movs	r3, #0
 8000272:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
    ADCIn_0.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000276:	2300      	movs	r3, #0
 8000278:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    GPIO_Init(&ADCIn_0);
 800027c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000280:	4618      	mov	r0, r3
 8000282:	f000 fe99 	bl	8000fb8 <GPIO_Init>

    ADC_Handle_t ADC_channel_0;
    pADC = &ADC_channel_0;
 8000286:	4a65      	ldr	r2, [pc, #404]	@ (800041c <main+0x218>)
 8000288:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800028c:	6013      	str	r3, [r2, #0]
    ADC_PeriClockControl(ADC1, ENABLE);
 800028e:	2101      	movs	r1, #1
 8000290:	4863      	ldr	r0, [pc, #396]	@ (8000420 <main+0x21c>)
 8000292:	f000 f987 	bl	80005a4 <ADC_PeriClockControl>

    ADC_channel_0.pADCx = ADC1;
 8000296:	4b62      	ldr	r3, [pc, #392]	@ (8000420 <main+0x21c>)
 8000298:	643b      	str	r3, [r7, #64]	@ 0x40
    ADC_channel_0.ADC_Config.ADC_Resolution = ADC_RESOLUTION_12_B;
 800029a:	2300      	movs	r3, #0
 800029c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    ADC_channel_0.ADC_Config.ADC_DataAlignment = ADC_DATA_ALIGNMENT_RIGHT;
 80002a0:	2300      	movs	r3, #0
 80002a2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    ADC_channel_0.ADC_Config.ADC_ScanMode =  ADC_SCAN_MODE_DI;
 80002a6:	2300      	movs	r3, #0
 80002a8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    ADC_channel_0.ADC_Config.ADC_ConversionMode =  ADC_CONV_MODE_SINGLE;
 80002ac:	2300      	movs	r3, #0
 80002ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    ADC_channel_0.ADC_Config.ADC_ExternalTriggerDetection =  ADC_EXT_TRIG_DECT_RE;
 80002b2:	2301      	movs	r3, #1
 80002b4:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
    ADC_channel_0.ADC_Config.ADC_ExternalTrigger =  ADC_EXT_TRIG_TIM2_TRGO;
 80002b8:	2306      	movs	r3, #6
 80002ba:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
    ADC_channel_0.ADC_Config.ADC_DMAContinuousRequests =  ADC_DMA_MODE_EN;
 80002be:	2301      	movs	r3, #1
 80002c0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    ADC_channel_0.ADC_Config.ADC_DDSelection =  ADC_DDS_RQ;
 80002c4:	2301      	movs	r3, #1
 80002c6:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
    ADC_channel_0.ADC_Config.ADC_EOCSelection =  ADC_EOC_PER_CONVERSION;
 80002ca:	2301      	movs	r3, #1
 80002cc:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    ADC_channel_0.ADC_Config.ADC_EOCInterrupt =  ADC_EOC_IT_DI;
 80002d0:	2300      	movs	r3, #0
 80002d2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    ADC_channel_0.ADC_NumChannels = 1;
 80002d6:	2301      	movs	r3, #1
 80002d8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    ADC_ChannelConfig(&ADC_channel_0, 0, 0, ADC_SMP_T_15);
 80002dc:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80002e0:	2301      	movs	r3, #1
 80002e2:	2200      	movs	r2, #0
 80002e4:	2100      	movs	r1, #0
 80002e6:	f000 faaf 	bl	8000848 <ADC_ChannelConfig>
    ADC_ConfigSequence(&ADC_channel_0);
 80002ea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 faf1 	bl	80008d6 <ADC_ConfigSequence>
    ADC_Init(&ADC_channel_0);
 80002f4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 f9ab 	bl	8000654 <ADC_Init>

    DMA_Handle_t DMA_0;
    pDMA = &DMA_0;
 80002fe:	4a49      	ldr	r2, [pc, #292]	@ (8000424 <main+0x220>)
 8000300:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000304:	6013      	str	r3, [r2, #0]

    DMA_0.pDMAx = DMA2;
 8000306:	4b48      	ldr	r3, [pc, #288]	@ (8000428 <main+0x224>)
 8000308:	627b      	str	r3, [r7, #36]	@ 0x24
    DMA_0.DMA_stream = 0;
 800030a:	2300      	movs	r3, #0
 800030c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    DMA_0.DMA_Config.DMA_Channel = DMA_CHANNEL_0;
 8000310:	2300      	movs	r3, #0
 8000312:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    DMA_0.DMA_Config.DMA_Direction = DMA_DIR_PERIPH_TO_MEM;
 8000316:	2300      	movs	r3, #0
 8000318:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    DMA_0.DMA_Config.DMA_Priority = DMA_PRIORITY_HIGH;
 800031c:	2302      	movs	r3, #2
 800031e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    DMA_0.DMA_Config.DMA_MemDataSize = DMA_DATA_SIZE_HALFWORD;
 8000322:	2301      	movs	r3, #1
 8000324:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    DMA_0.DMA_Config.DMA_PeriphDataSize = DMA_DATA_SIZE_HALFWORD;
 8000328:	2301      	movs	r3, #1
 800032a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    DMA_0.DMA_Config.DMA_MemInc = DISABLE;
 800032e:	2300      	movs	r3, #0
 8000330:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    DMA_0.DMA_Config.DMA_PeriphInc = DISABLE;
 8000334:	2300      	movs	r3, #0
 8000336:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    DMA_0.DMA_Config.DMA_FIFOMode = DMA_FIFO_MODE_DISABLED;
 800033a:	2301      	movs	r3, #1
 800033c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    DMA_0.DMA_Config.DMA_FIFOThreshold = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    DMA_0.DMA_Config.DMA_Mode = DMA_MODE_CIRCULAR;
 8000346:	2301      	movs	r3, #1
 8000348:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    DMA_0.BufferSize = 1;
 800034c:	2301      	movs	r3, #1
 800034e:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    DMA_Init(&DMA_0);
 8000350:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000354:	4618      	mov	r0, r3
 8000356:	f000 fb83 	bl	8000a60 <DMA_Init>
    DMA_SetAddresses(&DMA_0,(void*)&ADC_channel_0.pADCx->DR,(void*)value);
 800035a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800035c:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 8000360:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000364:	4a31      	ldr	r2, [pc, #196]	@ (800042c <main+0x228>)
 8000366:	4618      	mov	r0, r3
 8000368:	f000 fd16 	bl	8000d98 <DMA_SetAddresses>
    DMA_StartTransfer(&DMA_0);
 800036c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000370:	4618      	mov	r0, r3
 8000372:	f000 fc97 	bl	8000ca4 <DMA_StartTransfer>

	TIM_Handle_t TIM_2;
	pTIM = &TIM_2;
 8000376:	4a2e      	ldr	r2, [pc, #184]	@ (8000430 <main+0x22c>)
 8000378:	f107 0314 	add.w	r3, r7, #20
 800037c:	6013      	str	r3, [r2, #0]
	TIM_2.pTIMx = TIM2;
 800037e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000382:	617b      	str	r3, [r7, #20]
	TIM_2.TIM_Config.TIM_Frequency = 9600;
 8000384:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000388:	61bb      	str	r3, [r7, #24]
	TIM_2.TIM_Config.TIM_CLKDivision = TIM_CKD_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	773b      	strb	r3, [r7, #28]
	TIM_2.TIM_Config.TIM_AutoReloadPreload = TIM_ARPE_ENABLE;
 800038e:	2301      	movs	r3, #1
 8000390:	77bb      	strb	r3, [r7, #30]
	TIM_2.TIM_Config.TIM_CNTMode = TIM_UPCOUNT_MODE;
 8000392:	2300      	movs	r3, #0
 8000394:	777b      	strb	r3, [r7, #29]
	TIM_2.TIM_Config.TIM_IntEnable = TIM_IT_ENABLE;
 8000396:	2301      	movs	r3, #1
 8000398:	77fb      	strb	r3, [r7, #31]
	TIM_2.TIM_Config.TIM_MasterModeSel = TIM_MMS_UPDATE;
 800039a:	2302      	movs	r3, #2
 800039c:	f887 3020 	strb.w	r3, [r7, #32]
	TIM_Init(&TIM_2);
 80003a0:	f107 0314 	add.w	r3, r7, #20
 80003a4:	4618      	mov	r0, r3
 80003a6:	f001 f9b5 	bl	8001714 <TIM_Init>

	TIM_Handle_t TIM_3;
	pTIM = &TIM_3;
 80003aa:	4a21      	ldr	r2, [pc, #132]	@ (8000430 <main+0x22c>)
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	6013      	str	r3, [r2, #0]
	TIM_3.pTIMx = TIM3;
 80003b0:	4b20      	ldr	r3, [pc, #128]	@ (8000434 <main+0x230>)
 80003b2:	607b      	str	r3, [r7, #4]
	TIM_3.TIM_Config.TIM_Frequency = 960000;
 80003b4:	4b20      	ldr	r3, [pc, #128]	@ (8000438 <main+0x234>)
 80003b6:	60bb      	str	r3, [r7, #8]
	TIM_3.TIM_Config.TIM_CLKDivision = TIM_CKD_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	733b      	strb	r3, [r7, #12]
	TIM_3.TIM_Config.TIM_AutoReloadPreload = TIM_ARPE_ENABLE;
 80003bc:	2301      	movs	r3, #1
 80003be:	73bb      	strb	r3, [r7, #14]
	TIM_3.TIM_Config.TIM_CNTMode = TIM_UPCOUNT_MODE;
 80003c0:	2300      	movs	r3, #0
 80003c2:	737b      	strb	r3, [r7, #13]
	TIM_3.TIM_Config.TIM_IntEnable = TIM_IT_ENABLE;
 80003c4:	2301      	movs	r3, #1
 80003c6:	73fb      	strb	r3, [r7, #15]
	TIM_3.TIM_Config.TIM_MasterModeSel = TIM_MMS_UPDATE;
 80003c8:	2302      	movs	r3, #2
 80003ca:	743b      	strb	r3, [r7, #16]
	TIM_Init(&TIM_3);
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	4618      	mov	r0, r3
 80003d0:	f001 f9a0 	bl	8001714 <TIM_Init>

	TIM_Start(&TIM_3);
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	4618      	mov	r0, r3
 80003d8:	f001 fa94 	bl	8001904 <TIM_Start>
	TIM_IRQInterruptConfig(IRQ_NO_TIM3, ENABLE);
 80003dc:	2101      	movs	r1, #1
 80003de:	201d      	movs	r0, #29
 80003e0:	f001 faa2 	bl	8001928 <TIM_IRQInterruptConfig>
	TIM_IRQPriorityConfig(IRQ_NO_TIM3, 0);
 80003e4:	2100      	movs	r1, #0
 80003e6:	201d      	movs	r0, #29
 80003e8:	f001 fb24 	bl	8001a34 <TIM_IRQPriorityConfig>

	TIM_Start(&TIM_2);
 80003ec:	f107 0314 	add.w	r3, r7, #20
 80003f0:	4618      	mov	r0, r3
 80003f2:	f001 fa87 	bl	8001904 <TIM_Start>
	TIM_IRQInterruptConfig(IRQ_NO_TIM2, ENABLE);
 80003f6:	2101      	movs	r1, #1
 80003f8:	201c      	movs	r0, #28
 80003fa:	f001 fa95 	bl	8001928 <TIM_IRQInterruptConfig>
	TIM_IRQPriorityConfig(IRQ_NO_TIM2, 1);
 80003fe:	2101      	movs	r1, #1
 8000400:	201c      	movs	r0, #28
 8000402:	f001 fb17 	bl	8001a34 <TIM_IRQPriorityConfig>

	while(1);
 8000406:	bf00      	nop
 8000408:	e7fd      	b.n	8000406 <main+0x202>
 800040a:	bf00      	nop
 800040c:	e000ed88 	.word	0xe000ed88
 8000410:	40020000 	.word	0x40020000
 8000414:	40020800 	.word	0x40020800
 8000418:	20000020 	.word	0x20000020
 800041c:	20000024 	.word	0x20000024
 8000420:	40012000 	.word	0x40012000
 8000424:	20000028 	.word	0x20000028
 8000428:	40026400 	.word	0x40026400
 800042c:	2000002c 	.word	0x2000002c
 8000430:	2000001c 	.word	0x2000001c
 8000434:	40000400 	.word	0x40000400
 8000438:	000ea600 	.word	0x000ea600

0800043c <TIM2_IRQHandler>:
	return 0;
}

void TIM2_IRQHandler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0

	TIM_IRQHandling(pTIM);
 8000440:	4b05      	ldr	r3, [pc, #20]	@ (8000458 <TIM2_IRQHandler+0x1c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4618      	mov	r0, r3
 8000446:	f001 fb23 	bl	8001a90 <TIM_IRQHandling>
	new[0] = value[0];
 800044a:	4b04      	ldr	r3, [pc, #16]	@ (800045c <TIM2_IRQHandler+0x20>)
 800044c:	881a      	ldrh	r2, [r3, #0]
 800044e:	4b04      	ldr	r3, [pc, #16]	@ (8000460 <TIM2_IRQHandler+0x24>)
 8000450:	801a      	strh	r2, [r3, #0]
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	2000001c 	.word	0x2000001c
 800045c:	2000002c 	.word	0x2000002c
 8000460:	20000034 	.word	0x20000034

08000464 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	static uint16_t cont = 0;
	static uint8_t dir = 0;
	static uint8_t current_state = 0;
	static uint8_t last_state = 0;
	TIM_IRQHandling(pTIM);
 8000468:	4b32      	ldr	r3, [pc, #200]	@ (8000534 <TIM3_IRQHandler+0xd0>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4618      	mov	r0, r3
 800046e:	f001 fb0f 	bl	8001a90 <TIM_IRQHandling>

	if((dir==0) && (cont<4095)) cont+=INC;
 8000472:	4b31      	ldr	r3, [pc, #196]	@ (8000538 <TIM3_IRQHandler+0xd4>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d10c      	bne.n	8000494 <TIM3_IRQHandler+0x30>
 800047a:	4b30      	ldr	r3, [pc, #192]	@ (800053c <TIM3_IRQHandler+0xd8>)
 800047c:	881b      	ldrh	r3, [r3, #0]
 800047e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8000482:	4293      	cmp	r3, r2
 8000484:	d806      	bhi.n	8000494 <TIM3_IRQHandler+0x30>
 8000486:	4b2d      	ldr	r3, [pc, #180]	@ (800053c <TIM3_IRQHandler+0xd8>)
 8000488:	881b      	ldrh	r3, [r3, #0]
 800048a:	3352      	adds	r3, #82	@ 0x52
 800048c:	b29a      	uxth	r2, r3
 800048e:	4b2b      	ldr	r3, [pc, #172]	@ (800053c <TIM3_IRQHandler+0xd8>)
 8000490:	801a      	strh	r2, [r3, #0]
 8000492:	e00c      	b.n	80004ae <TIM3_IRQHandler+0x4a>
	else if((dir==0) && (cont>=4095)) dir = 1;
 8000494:	4b28      	ldr	r3, [pc, #160]	@ (8000538 <TIM3_IRQHandler+0xd4>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d108      	bne.n	80004ae <TIM3_IRQHandler+0x4a>
 800049c:	4b27      	ldr	r3, [pc, #156]	@ (800053c <TIM3_IRQHandler+0xd8>)
 800049e:	881b      	ldrh	r3, [r3, #0]
 80004a0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d902      	bls.n	80004ae <TIM3_IRQHandler+0x4a>
 80004a8:	4b23      	ldr	r3, [pc, #140]	@ (8000538 <TIM3_IRQHandler+0xd4>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	701a      	strb	r2, [r3, #0]

	if((dir==1) && (cont>0)) cont-=INC;
 80004ae:	4b22      	ldr	r3, [pc, #136]	@ (8000538 <TIM3_IRQHandler+0xd4>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d10a      	bne.n	80004cc <TIM3_IRQHandler+0x68>
 80004b6:	4b21      	ldr	r3, [pc, #132]	@ (800053c <TIM3_IRQHandler+0xd8>)
 80004b8:	881b      	ldrh	r3, [r3, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d006      	beq.n	80004cc <TIM3_IRQHandler+0x68>
 80004be:	4b1f      	ldr	r3, [pc, #124]	@ (800053c <TIM3_IRQHandler+0xd8>)
 80004c0:	881b      	ldrh	r3, [r3, #0]
 80004c2:	3b52      	subs	r3, #82	@ 0x52
 80004c4:	b29a      	uxth	r2, r3
 80004c6:	4b1d      	ldr	r3, [pc, #116]	@ (800053c <TIM3_IRQHandler+0xd8>)
 80004c8:	801a      	strh	r2, [r3, #0]
 80004ca:	e00a      	b.n	80004e2 <TIM3_IRQHandler+0x7e>
	else if((dir==1) && (cont<=0)) dir = 0;
 80004cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000538 <TIM3_IRQHandler+0xd4>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d106      	bne.n	80004e2 <TIM3_IRQHandler+0x7e>
 80004d4:	4b19      	ldr	r3, [pc, #100]	@ (800053c <TIM3_IRQHandler+0xd8>)
 80004d6:	881b      	ldrh	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d102      	bne.n	80004e2 <TIM3_IRQHandler+0x7e>
 80004dc:	4b16      	ldr	r3, [pc, #88]	@ (8000538 <TIM3_IRQHandler+0xd4>)
 80004de:	2200      	movs	r2, #0
 80004e0:	701a      	strb	r2, [r3, #0]

	if(new[0] > cont) current_state = 1;
 80004e2:	4b17      	ldr	r3, [pc, #92]	@ (8000540 <TIM3_IRQHandler+0xdc>)
 80004e4:	881a      	ldrh	r2, [r3, #0]
 80004e6:	4b15      	ldr	r3, [pc, #84]	@ (800053c <TIM3_IRQHandler+0xd8>)
 80004e8:	881b      	ldrh	r3, [r3, #0]
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d903      	bls.n	80004f6 <TIM3_IRQHandler+0x92>
 80004ee:	4b15      	ldr	r3, [pc, #84]	@ (8000544 <TIM3_IRQHandler+0xe0>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	701a      	strb	r2, [r3, #0]
 80004f4:	e002      	b.n	80004fc <TIM3_IRQHandler+0x98>
	else current_state = 0;
 80004f6:	4b13      	ldr	r3, [pc, #76]	@ (8000544 <TIM3_IRQHandler+0xe0>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]

	if(current_state != last_state)
 80004fc:	4b11      	ldr	r3, [pc, #68]	@ (8000544 <TIM3_IRQHandler+0xe0>)
 80004fe:	781a      	ldrb	r2, [r3, #0]
 8000500:	4b11      	ldr	r3, [pc, #68]	@ (8000548 <TIM3_IRQHandler+0xe4>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	429a      	cmp	r2, r3
 8000506:	d013      	beq.n	8000530 <TIM3_IRQHandler+0xcc>
	{
		if(current_state)
 8000508:	4b0e      	ldr	r3, [pc, #56]	@ (8000544 <TIM3_IRQHandler+0xe0>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d005      	beq.n	800051c <TIM3_IRQHandler+0xb8>
			pGPIO->pGPIOx->BSRR = ( 1 << 7 );
 8000510:	4b0e      	ldr	r3, [pc, #56]	@ (800054c <TIM3_IRQHandler+0xe8>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2280      	movs	r2, #128	@ 0x80
 8000518:	619a      	str	r2, [r3, #24]
 800051a:	e005      	b.n	8000528 <TIM3_IRQHandler+0xc4>
		else
			pGPIO->pGPIOx->BSRR = ( 1 << ( 7 + 16 ) );
 800051c:	4b0b      	ldr	r3, [pc, #44]	@ (800054c <TIM3_IRQHandler+0xe8>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000526:	619a      	str	r2, [r3, #24]

		last_state = current_state;
 8000528:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <TIM3_IRQHandler+0xe0>)
 800052a:	781a      	ldrb	r2, [r3, #0]
 800052c:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <TIM3_IRQHandler+0xe4>)
 800052e:	701a      	strb	r2, [r3, #0]
	}

}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	2000001c 	.word	0x2000001c
 8000538:	2000003c 	.word	0x2000003c
 800053c:	2000003e 	.word	0x2000003e
 8000540:	20000034 	.word	0x20000034
 8000544:	20000040 	.word	0x20000040
 8000548:	20000041 	.word	0x20000041
 800054c:	20000020 	.word	0x20000020

08000550 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000550:	480d      	ldr	r0, [pc, #52]	@ (8000588 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000552:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000554:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000558:	480c      	ldr	r0, [pc, #48]	@ (800058c <LoopForever+0x6>)
  ldr r1, =_edata
 800055a:	490d      	ldr	r1, [pc, #52]	@ (8000590 <LoopForever+0xa>)
  ldr r2, =_sidata
 800055c:	4a0d      	ldr	r2, [pc, #52]	@ (8000594 <LoopForever+0xe>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000560:	e002      	b.n	8000568 <LoopCopyDataInit>

08000562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000566:	3304      	adds	r3, #4

08000568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800056c:	d3f9      	bcc.n	8000562 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056e:	4a0a      	ldr	r2, [pc, #40]	@ (8000598 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000570:	4c0a      	ldr	r4, [pc, #40]	@ (800059c <LoopForever+0x16>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000574:	e001      	b.n	800057a <LoopFillZerobss>

08000576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000578:	3204      	adds	r2, #4

0800057a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800057c:	d3fb      	bcc.n	8000576 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800057e:	f001 faa1 	bl	8001ac4 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000582:	f7ff fe3f 	bl	8000204 <main>

08000586 <LoopForever>:

LoopForever:
  b LoopForever
 8000586:	e7fe      	b.n	8000586 <LoopForever>
  ldr   r0, =_estack
 8000588:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800058c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000590:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000594:	08001b2c 	.word	0x08001b2c
  ldr r2, =_sbss
 8000598:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800059c:	20000044 	.word	0x20000044

080005a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a0:	e7fe      	b.n	80005a0 <ADC_IRQHandler>
	...

080005a4 <ADC_PeriClockControl>:
 *
 * @Note			- none
 *
 * */
void ADC_PeriClockControl(ADC_RegDef_t *pADCx, uint8_t EnorDi)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80005b0:	78fb      	ldrb	r3, [r7, #3]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d120      	bne.n	80005f8 <ADC_PeriClockControl+0x54>
	{
		if (pADCx == ADC1) ADC1_PCLK_EN();
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a22      	ldr	r2, [pc, #136]	@ (8000644 <ADC_PeriClockControl+0xa0>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d106      	bne.n	80005cc <ADC_PeriClockControl+0x28>
 80005be:	4b22      	ldr	r3, [pc, #136]	@ (8000648 <ADC_PeriClockControl+0xa4>)
 80005c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005c2:	4a21      	ldr	r2, [pc, #132]	@ (8000648 <ADC_PeriClockControl+0xa4>)
 80005c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005c8:	6453      	str	r3, [r2, #68]	@ 0x44
	else
	{
		if (pADCx == ADC1) ADC1_PCLK_DI();
		else if (pADCx == ADC2) ADC2_PCLK_DI();
		else if (pADCx == ADC3) ADC3_PCLK_DI();	}
}
 80005ca:	e035      	b.n	8000638 <ADC_PeriClockControl+0x94>
		else if (pADCx == ADC2) ADC2_PCLK_EN();
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4a1f      	ldr	r2, [pc, #124]	@ (800064c <ADC_PeriClockControl+0xa8>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d106      	bne.n	80005e2 <ADC_PeriClockControl+0x3e>
 80005d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000648 <ADC_PeriClockControl+0xa4>)
 80005d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000648 <ADC_PeriClockControl+0xa4>)
 80005da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005de:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80005e0:	e02a      	b.n	8000638 <ADC_PeriClockControl+0x94>
		else if (pADCx == ADC3) ADC3_PCLK_EN();
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4a1a      	ldr	r2, [pc, #104]	@ (8000650 <ADC_PeriClockControl+0xac>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d126      	bne.n	8000638 <ADC_PeriClockControl+0x94>
 80005ea:	4b17      	ldr	r3, [pc, #92]	@ (8000648 <ADC_PeriClockControl+0xa4>)
 80005ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ee:	4a16      	ldr	r2, [pc, #88]	@ (8000648 <ADC_PeriClockControl+0xa4>)
 80005f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005f4:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80005f6:	e01f      	b.n	8000638 <ADC_PeriClockControl+0x94>
		if (pADCx == ADC1) ADC1_PCLK_DI();
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a12      	ldr	r2, [pc, #72]	@ (8000644 <ADC_PeriClockControl+0xa0>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d106      	bne.n	800060e <ADC_PeriClockControl+0x6a>
 8000600:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <ADC_PeriClockControl+0xa4>)
 8000602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000604:	4a10      	ldr	r2, [pc, #64]	@ (8000648 <ADC_PeriClockControl+0xa4>)
 8000606:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800060a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800060c:	e014      	b.n	8000638 <ADC_PeriClockControl+0x94>
		else if (pADCx == ADC2) ADC2_PCLK_DI();
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4a0e      	ldr	r2, [pc, #56]	@ (800064c <ADC_PeriClockControl+0xa8>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d106      	bne.n	8000624 <ADC_PeriClockControl+0x80>
 8000616:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <ADC_PeriClockControl+0xa4>)
 8000618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800061a:	4a0b      	ldr	r2, [pc, #44]	@ (8000648 <ADC_PeriClockControl+0xa4>)
 800061c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000620:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000622:	e009      	b.n	8000638 <ADC_PeriClockControl+0x94>
		else if (pADCx == ADC3) ADC3_PCLK_DI();	}
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a0a      	ldr	r2, [pc, #40]	@ (8000650 <ADC_PeriClockControl+0xac>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d105      	bne.n	8000638 <ADC_PeriClockControl+0x94>
 800062c:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <ADC_PeriClockControl+0xa4>)
 800062e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000630:	4a05      	ldr	r2, [pc, #20]	@ (8000648 <ADC_PeriClockControl+0xa4>)
 8000632:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000636:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	40012000 	.word	0x40012000
 8000648:	40023800 	.word	0x40023800
 800064c:	40012100 	.word	0x40012100
 8000650:	40012200 	.word	0x40012200

08000654 <ADC_Init>:
 *
 * @Note			- none
 *
 * */
void ADC_Init(ADC_Handle_t *pADCHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	ADC_PeriClockControl(pADCHandle->pADCx, ENABLE);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2101      	movs	r1, #1
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ff9e 	bl	80005a4 <ADC_PeriClockControl>

	for(__vo uint16_t i = 0; i < 1000; i++);
 8000668:	2300      	movs	r3, #0
 800066a:	81fb      	strh	r3, [r7, #14]
 800066c:	e004      	b.n	8000678 <ADC_Init+0x24>
 800066e:	89fb      	ldrh	r3, [r7, #14]
 8000670:	b29b      	uxth	r3, r3
 8000672:	3301      	adds	r3, #1
 8000674:	b29b      	uxth	r3, r3
 8000676:	81fb      	strh	r3, [r7, #14]
 8000678:	89fb      	ldrh	r3, [r7, #14]
 800067a:	b29b      	uxth	r3, r3
 800067c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000680:	d3f5      	bcc.n	800066e <ADC_Init+0x1a>

	pADCHandle->pADCx->SR &= ~(0x3F << 0);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8000690:	601a      	str	r2, [r3, #0]

	pADCHandle->pADCx->CR1 &= ~(( 0x1F << 22 ) | ( 0xFFFF << 0 ));
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	6859      	ldr	r1, [r3, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b68      	ldr	r3, [pc, #416]	@ (8000840 <ADC_Init+0x1ec>)
 800069e:	400b      	ands	r3, r1
 80006a0:	6053      	str	r3, [r2, #4]
	pADCHandle->pADCx->CR2 &= ~(( 0x7F << 24 ) | ( 0x7F << 16 ) | ( 0xF << 8 ) | (0x3 << 0));
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	6899      	ldr	r1, [r3, #8]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	4b65      	ldr	r3, [pc, #404]	@ (8000844 <ADC_Init+0x1f0>)
 80006ae:	400b      	ands	r3, r1
 80006b0:	6093      	str	r3, [r2, #8]

	pADCHandle->pADCx->CR2 |= (1 << 0);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	689a      	ldr	r2, [r3, #8]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f042 0201 	orr.w	r2, r2, #1
 80006c0:	609a      	str	r2, [r3, #8]

	for(__vo uint16_t i = 0; i < 2000; i++);
 80006c2:	2300      	movs	r3, #0
 80006c4:	81bb      	strh	r3, [r7, #12]
 80006c6:	e004      	b.n	80006d2 <ADC_Init+0x7e>
 80006c8:	89bb      	ldrh	r3, [r7, #12]
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	3301      	adds	r3, #1
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	81bb      	strh	r3, [r7, #12]
 80006d2:	89bb      	ldrh	r3, [r7, #12]
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80006da:	d3f5      	bcc.n	80006c8 <ADC_Init+0x74>

	pADCHandle->pADCx->CR1 |= (pADCHandle->ADC_Config.ADC_Resolution << 24);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	6859      	ldr	r1, [r3, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	061a      	lsls	r2, r3, #24
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	430a      	orrs	r2, r1
 80006ee:	605a      	str	r2, [r3, #4]

	if(pADCHandle->ADC_Config.ADC_ConversionMode == ADC_CONV_MODE_DISCONTINUOUS)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	79db      	ldrb	r3, [r3, #7]
 80006f4:	2b02      	cmp	r3, #2
 80006f6:	d110      	bne.n	800071a <ADC_Init+0xc6>
	{
		pADCHandle->pADCx->CR1 |= (1 << 11);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	685a      	ldr	r2, [r3, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000706:	605a      	str	r2, [r3, #4]
		pADCHandle->pADCx->CR2 &= ~(1 << 1);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	689a      	ldr	r2, [r3, #8]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f022 0202 	bic.w	r2, r2, #2
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	e028      	b.n	800076c <ADC_Init+0x118>
	}else if(pADCHandle->ADC_Config.ADC_ConversionMode == ADC_CONV_MODE_CONTINUOUS)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	79db      	ldrb	r3, [r3, #7]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d110      	bne.n	8000744 <ADC_Init+0xf0>
	{
		pADCHandle->pADCx->CR1 &= ~(1 << 11);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	685a      	ldr	r2, [r3, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000730:	605a      	str	r2, [r3, #4]
		pADCHandle->pADCx->CR2 |= (1 << 1);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	689a      	ldr	r2, [r3, #8]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f042 0202 	orr.w	r2, r2, #2
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	e013      	b.n	800076c <ADC_Init+0x118>
	}else if(pADCHandle->ADC_Config.ADC_ConversionMode == ADC_CONV_MODE_SINGLE)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	79db      	ldrb	r3, [r3, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d10f      	bne.n	800076c <ADC_Init+0x118>
	{
		pADCHandle->pADCx->CR1 &= ~(1 << 11);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	685a      	ldr	r2, [r3, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800075a:	605a      	str	r2, [r3, #4]
		pADCHandle->pADCx->CR2 &= ~(1 << 1);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	689a      	ldr	r2, [r3, #8]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f022 0202 	bic.w	r2, r2, #2
 800076a:	609a      	str	r2, [r3, #8]
	}

	pADCHandle->pADCx->CR1 |= (pADCHandle->ADC_Config.ADC_ScanMode << 8);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	6859      	ldr	r1, [r3, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	799b      	ldrb	r3, [r3, #6]
 8000776:	021a      	lsls	r2, r3, #8
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	430a      	orrs	r2, r1
 800077e:	605a      	str	r2, [r3, #4]

	pADCHandle->pADCx->CR1 |= (pADCHandle->ADC_Config.ADC_EOCInterrupt << 5);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	6859      	ldr	r1, [r3, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	7b5b      	ldrb	r3, [r3, #13]
 800078a:	015a      	lsls	r2, r3, #5
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	430a      	orrs	r2, r1
 8000792:	605a      	str	r2, [r3, #4]

	pADCHandle->pADCx->CR2 |= (pADCHandle->ADC_Config.ADC_ExternalTriggerDetection << 28);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	6899      	ldr	r1, [r3, #8]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	7a1b      	ldrb	r3, [r3, #8]
 800079e:	071a      	lsls	r2, r3, #28
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	430a      	orrs	r2, r1
 80007a6:	609a      	str	r2, [r3, #8]

	pADCHandle->pADCx->CR2 |= (pADCHandle->ADC_Config.ADC_ExternalTrigger << 24);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	6899      	ldr	r1, [r3, #8]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	7a5b      	ldrb	r3, [r3, #9]
 80007b2:	061a      	lsls	r2, r3, #24
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	430a      	orrs	r2, r1
 80007ba:	609a      	str	r2, [r3, #8]

	pADCHandle->pADCx->CR2 |= (pADCHandle->ADC_Config.ADC_DataAlignment << 11);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	6899      	ldr	r1, [r3, #8]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	795b      	ldrb	r3, [r3, #5]
 80007c6:	02da      	lsls	r2, r3, #11
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	430a      	orrs	r2, r1
 80007ce:	609a      	str	r2, [r3, #8]

	pADCHandle->pADCx->CR2 |= (pADCHandle->ADC_Config.ADC_EOCSelection << 10);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	6899      	ldr	r1, [r3, #8]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	7adb      	ldrb	r3, [r3, #11]
 80007da:	029a      	lsls	r2, r3, #10
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	430a      	orrs	r2, r1
 80007e2:	609a      	str	r2, [r3, #8]

	pADCHandle->pADCx->CR2 |= (pADCHandle->ADC_Config.ADC_DDSelection << 9);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	6899      	ldr	r1, [r3, #8]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	7b1b      	ldrb	r3, [r3, #12]
 80007ee:	025a      	lsls	r2, r3, #9
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	430a      	orrs	r2, r1
 80007f6:	609a      	str	r2, [r3, #8]

	pADCHandle->pADCx->CR2 |= (pADCHandle->ADC_Config.ADC_DMAContinuousRequests << 8);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	6899      	ldr	r1, [r3, #8]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	7a9b      	ldrb	r3, [r3, #10]
 8000802:	021a      	lsls	r2, r3, #8
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	430a      	orrs	r2, r1
 800080a:	609a      	str	r2, [r3, #8]

	while(!(pADCHandle->pADCx->CR2 & (1<<0)));
 800080c:	bf00      	nop
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	2b00      	cmp	r3, #0
 800081a:	d0f8      	beq.n	800080e <ADC_Init+0x1ba>

	for(__vo uint16_t i = 0; i < 1000; i++);
 800081c:	2300      	movs	r3, #0
 800081e:	817b      	strh	r3, [r7, #10]
 8000820:	e004      	b.n	800082c <ADC_Init+0x1d8>
 8000822:	897b      	ldrh	r3, [r7, #10]
 8000824:	b29b      	uxth	r3, r3
 8000826:	3301      	adds	r3, #1
 8000828:	b29b      	uxth	r3, r3
 800082a:	817b      	strh	r3, [r7, #10]
 800082c:	897b      	ldrh	r3, [r7, #10]
 800082e:	b29b      	uxth	r3, r3
 8000830:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000834:	d3f5      	bcc.n	8000822 <ADC_Init+0x1ce>
}
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	f83f0000 	.word	0xf83f0000
 8000844:	8080f0fc 	.word	0x8080f0fc

08000848 <ADC_ChannelConfig>:
{
	ADC_REG_RESET();
}

void ADC_ChannelConfig(ADC_Handle_t *pADCHandle, uint8_t channel, uint8_t rank, uint8_t samplingTime)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	4608      	mov	r0, r1
 8000852:	4611      	mov	r1, r2
 8000854:	461a      	mov	r2, r3
 8000856:	4603      	mov	r3, r0
 8000858:	70fb      	strb	r3, [r7, #3]
 800085a:	460b      	mov	r3, r1
 800085c:	70bb      	strb	r3, [r7, #2]
 800085e:	4613      	mov	r3, r2
 8000860:	707b      	strb	r3, [r7, #1]
	//rank goes the same as index 0-15, the closer to 0 the higher the rank
	pADCHandle->ADC_Channels[rank] = channel;
 8000862:	78bb      	ldrb	r3, [r7, #2]
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	4413      	add	r3, r2
 8000868:	78fa      	ldrb	r2, [r7, #3]
 800086a:	73da      	strb	r2, [r3, #15]
	pADCHandle->ADC_SamplingTime[rank] = samplingTime;
 800086c:	78bb      	ldrb	r3, [r7, #2]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	4413      	add	r3, r2
 8000872:	787a      	ldrb	r2, [r7, #1]
 8000874:	77da      	strb	r2, [r3, #31]

	if( channel <= 9 )
 8000876:	78fb      	ldrb	r3, [r7, #3]
 8000878:	2b09      	cmp	r3, #9
 800087a:	d80f      	bhi.n	800089c <ADC_ChannelConfig+0x54>
	{
		pADCHandle->pADCx->SMPR2 |= ( samplingTime << 3*channel  );
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	6919      	ldr	r1, [r3, #16]
 8000882:	7878      	ldrb	r0, [r7, #1]
 8000884:	78fa      	ldrb	r2, [r7, #3]
 8000886:	4613      	mov	r3, r2
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	4413      	add	r3, r2
 800088c:	fa00 f303 	lsl.w	r3, r0, r3
 8000890:	461a      	mov	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	430a      	orrs	r2, r1
 8000898:	611a      	str	r2, [r3, #16]
	} else if ( (channel >= 10) && (channel <= 18) )
	{
		pADCHandle->pADCx->SMPR1 |= ( samplingTime << 3*(channel - 10 )  );
	}

}
 800089a:	e016      	b.n	80008ca <ADC_ChannelConfig+0x82>
	} else if ( (channel >= 10) && (channel <= 18) )
 800089c:	78fb      	ldrb	r3, [r7, #3]
 800089e:	2b09      	cmp	r3, #9
 80008a0:	d913      	bls.n	80008ca <ADC_ChannelConfig+0x82>
 80008a2:	78fb      	ldrb	r3, [r7, #3]
 80008a4:	2b12      	cmp	r3, #18
 80008a6:	d810      	bhi.n	80008ca <ADC_ChannelConfig+0x82>
		pADCHandle->pADCx->SMPR1 |= ( samplingTime << 3*(channel - 10 )  );
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	68d9      	ldr	r1, [r3, #12]
 80008ae:	7878      	ldrb	r0, [r7, #1]
 80008b0:	78fb      	ldrb	r3, [r7, #3]
 80008b2:	f1a3 020a 	sub.w	r2, r3, #10
 80008b6:	4613      	mov	r3, r2
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	4413      	add	r3, r2
 80008bc:	fa00 f303 	lsl.w	r3, r0, r3
 80008c0:	461a      	mov	r2, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	430a      	orrs	r2, r1
 80008c8:	60da      	str	r2, [r3, #12]
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <ADC_ConfigSequence>:

void ADC_ConfigSequence(ADC_Handle_t *pADCHandle)
{
 80008d6:	b480      	push	{r7}
 80008d8:	b085      	sub	sp, #20
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
	pADCHandle->pADCx->SQR3 &= ~( 0x3FFFFFFF << 0 );
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 80008ec:	635a      	str	r2, [r3, #52]	@ 0x34
	pADCHandle->pADCx->SQR2 &= ~( 0x3FFFFFFF << 0 );
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 80008fc:	631a      	str	r2, [r3, #48]	@ 0x30
	pADCHandle->pADCx->SQR1 &= ~( 0xFFFFFF << 0 );
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800090c:	62da      	str	r2, [r3, #44]	@ 0x2c

	pADCHandle->pADCx->SQR1 |= ( ( pADCHandle->ADC_NumChannels - 1 ) << 20 );
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	7b9b      	ldrb	r3, [r3, #14]
 8000918:	3b01      	subs	r3, #1
 800091a:	051a      	lsls	r2, r3, #20
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	430a      	orrs	r2, r1
 8000922:	62da      	str	r2, [r3, #44]	@ 0x2c

	for(uint8_t i = 0; i < pADCHandle->ADC_NumChannels; i++ )
 8000924:	2300      	movs	r3, #0
 8000926:	73fb      	strb	r3, [r7, #15]
 8000928:	e04d      	b.n	80009c6 <ADC_ConfigSequence+0xf0>
	{
		uint8_t sequence_position = i + 1;
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	3301      	adds	r3, #1
 800092e:	73bb      	strb	r3, [r7, #14]
		if( sequence_position <= 6 ) pADCHandle->pADCx->SQR3 |= ( ( pADCHandle->ADC_Channels[i] ) << 5*(sequence_position - 1) );
 8000930:	7bbb      	ldrb	r3, [r7, #14]
 8000932:	2b06      	cmp	r3, #6
 8000934:	d814      	bhi.n	8000960 <ADC_ConfigSequence+0x8a>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	7bdb      	ldrb	r3, [r3, #15]
 8000944:	4618      	mov	r0, r3
 8000946:	7bbb      	ldrb	r3, [r7, #14]
 8000948:	1e5a      	subs	r2, r3, #1
 800094a:	4613      	mov	r3, r2
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	4413      	add	r3, r2
 8000950:	fa00 f303 	lsl.w	r3, r0, r3
 8000954:	461a      	mov	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	430a      	orrs	r2, r1
 800095c:	635a      	str	r2, [r3, #52]	@ 0x34
 800095e:	e02f      	b.n	80009c0 <ADC_ConfigSequence+0xea>
		else if( sequence_position <= 12 ) pADCHandle->pADCx->SQR2 |= ( ( pADCHandle->ADC_Channels[i] ) << 5*(sequence_position - 7) );
 8000960:	7bbb      	ldrb	r3, [r7, #14]
 8000962:	2b0c      	cmp	r3, #12
 8000964:	d814      	bhi.n	8000990 <ADC_ConfigSequence+0xba>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	4413      	add	r3, r2
 8000972:	7bdb      	ldrb	r3, [r3, #15]
 8000974:	4618      	mov	r0, r3
 8000976:	7bbb      	ldrb	r3, [r7, #14]
 8000978:	1fda      	subs	r2, r3, #7
 800097a:	4613      	mov	r3, r2
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	4413      	add	r3, r2
 8000980:	fa00 f303 	lsl.w	r3, r0, r3
 8000984:	461a      	mov	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	430a      	orrs	r2, r1
 800098c:	631a      	str	r2, [r3, #48]	@ 0x30
 800098e:	e017      	b.n	80009c0 <ADC_ConfigSequence+0xea>
		else if( sequence_position <= 16 ) pADCHandle->pADCx->SQR1 |= ( ( pADCHandle->ADC_Channels[i] ) << 5*(sequence_position - 13) );
 8000990:	7bbb      	ldrb	r3, [r7, #14]
 8000992:	2b10      	cmp	r3, #16
 8000994:	d814      	bhi.n	80009c0 <ADC_ConfigSequence+0xea>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	7bdb      	ldrb	r3, [r3, #15]
 80009a4:	4618      	mov	r0, r3
 80009a6:	7bbb      	ldrb	r3, [r7, #14]
 80009a8:	f1a3 020d 	sub.w	r2, r3, #13
 80009ac:	4613      	mov	r3, r2
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	4413      	add	r3, r2
 80009b2:	fa00 f303 	lsl.w	r3, r0, r3
 80009b6:	461a      	mov	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	430a      	orrs	r2, r1
 80009be:	62da      	str	r2, [r3, #44]	@ 0x2c
	for(uint8_t i = 0; i < pADCHandle->ADC_NumChannels; i++ )
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	3301      	adds	r3, #1
 80009c4:	73fb      	strb	r3, [r7, #15]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	7b9b      	ldrb	r3, [r3, #14]
 80009ca:	7bfa      	ldrb	r2, [r7, #15]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d3ac      	bcc.n	800092a <ADC_ConfigSequence+0x54>
	}
}
 80009d0:	bf00      	nop
 80009d2:	bf00      	nop
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <DMA_PeriClockControl>:
 *
 * @Note			- none
 *
 * */
void DMA_PeriClockControl(DMA_RegDef_t *pDMAx, uint8_t EnorDi)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	460b      	mov	r3, r1
 80009ea:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d115      	bne.n	8000a1e <DMA_PeriClockControl+0x3e>
	{
		if (pDMAx == DMA1) DMA1_PCLK_EN();
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a17      	ldr	r2, [pc, #92]	@ (8000a54 <DMA_PeriClockControl+0x74>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d106      	bne.n	8000a08 <DMA_PeriClockControl+0x28>
 80009fa:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <DMA_PeriClockControl+0x78>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a16      	ldr	r2, [pc, #88]	@ (8000a58 <DMA_PeriClockControl+0x78>)
 8000a00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
	else
	{
		if (pDMAx == DMA1) DMA1_PCLK_DI();
		else if (pDMAx == DMA2) DMA2_PCLK_DI();
	}
}
 8000a06:	e01f      	b.n	8000a48 <DMA_PeriClockControl+0x68>
		else if (pDMAx == DMA2) DMA2_PCLK_EN();
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a14      	ldr	r2, [pc, #80]	@ (8000a5c <DMA_PeriClockControl+0x7c>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d11b      	bne.n	8000a48 <DMA_PeriClockControl+0x68>
 8000a10:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <DMA_PeriClockControl+0x78>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a14:	4a10      	ldr	r2, [pc, #64]	@ (8000a58 <DMA_PeriClockControl+0x78>)
 8000a16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a1a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a1c:	e014      	b.n	8000a48 <DMA_PeriClockControl+0x68>
		if (pDMAx == DMA1) DMA1_PCLK_DI();
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a0c      	ldr	r2, [pc, #48]	@ (8000a54 <DMA_PeriClockControl+0x74>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d106      	bne.n	8000a34 <DMA_PeriClockControl+0x54>
 8000a26:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <DMA_PeriClockControl+0x78>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000a58 <DMA_PeriClockControl+0x78>)
 8000a2c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a32:	e009      	b.n	8000a48 <DMA_PeriClockControl+0x68>
		else if (pDMAx == DMA2) DMA2_PCLK_DI();
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a09      	ldr	r2, [pc, #36]	@ (8000a5c <DMA_PeriClockControl+0x7c>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d105      	bne.n	8000a48 <DMA_PeriClockControl+0x68>
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <DMA_PeriClockControl+0x78>)
 8000a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a40:	4a05      	ldr	r2, [pc, #20]	@ (8000a58 <DMA_PeriClockControl+0x78>)
 8000a42:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000a46:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	40026000 	.word	0x40026000
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40026400 	.word	0x40026400

08000a60 <DMA_Init>:
 *
 * @Note			- none
 *
 * */
void DMA_Init(DMA_Handle_t *pDMAHandle)
{
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	DMA_PeriClockControl(pDMAHandle->pDMAx, ENABLE);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff ffb6 	bl	80009e0 <DMA_PeriClockControl>
	DMA_StopTransfer(pDMAHandle);
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f000 f939 	bl	8000cec <DMA_StopTransfer>
	DMA_ClearFlags(pDMAHandle);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f000 f95a 	bl	8000d34 <DMA_ClearFlags>
	pDMAHandle->pDMAx->STREAM[pDMAHandle->DMA_stream].CR &= ~(0x0FEFFFFF);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	7bdb      	ldrb	r3, [r3, #15]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	440b      	add	r3, r1
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	4413      	add	r3, r2
 8000a94:	3310      	adds	r3, #16
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	6811      	ldr	r1, [r2, #0]
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	7bd2      	ldrb	r2, [r2, #15]
 8000aa0:	4610      	mov	r0, r2
 8000aa2:	4a7f      	ldr	r2, [pc, #508]	@ (8000ca0 <DMA_Init+0x240>)
 8000aa4:	401a      	ands	r2, r3
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4403      	add	r3, r0
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	440b      	add	r3, r1
 8000ab0:	3310      	adds	r3, #16
 8000ab2:	601a      	str	r2, [r3, #0]
	pDMAHandle->pDMAx->STREAM[pDMAHandle->DMA_stream].NDTR &= ~(0xFFFF);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	7bdb      	ldrb	r3, [r3, #15]
 8000abc:	4619      	mov	r1, r3
 8000abe:	460b      	mov	r3, r1
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	440b      	add	r3, r1
 8000ac4:	00db      	lsls	r3, r3, #3
 8000ac6:	4413      	add	r3, r2
 8000ac8:	3314      	adds	r3, #20
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	6811      	ldr	r1, [r2, #0]
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	7bd2      	ldrb	r2, [r2, #15]
 8000ad4:	4610      	mov	r0, r2
 8000ad6:	0c1a      	lsrs	r2, r3, #16
 8000ad8:	0412      	lsls	r2, r2, #16
 8000ada:	4603      	mov	r3, r0
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	4403      	add	r3, r0
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	440b      	add	r3, r1
 8000ae4:	3314      	adds	r3, #20
 8000ae6:	601a      	str	r2, [r3, #0]
	pDMAHandle->pDMAx->STREAM[pDMAHandle->DMA_stream].PAR = 0;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6819      	ldr	r1, [r3, #0]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	7bdb      	ldrb	r3, [r3, #15]
 8000af0:	1c5a      	adds	r2, r3, #1
 8000af2:	4613      	mov	r3, r2
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	4413      	add	r3, r2
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	440b      	add	r3, r1
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
	pDMAHandle->pDMAx->STREAM[pDMAHandle->DMA_stream].M0AR = 0;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6819      	ldr	r1, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	7bdb      	ldrb	r3, [r3, #15]
 8000b08:	1c5a      	adds	r2, r3, #1
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	4413      	add	r3, r2
 8000b10:	00db      	lsls	r3, r3, #3
 8000b12:	440b      	add	r3, r1
 8000b14:	3304      	adds	r3, #4
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
	pDMAHandle->pDMAx->STREAM[pDMAHandle->DMA_stream].M1AR = 0;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	7bdb      	ldrb	r3, [r3, #15]
 8000b22:	4619      	mov	r1, r3
 8000b24:	460b      	mov	r3, r1
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	440b      	add	r3, r1
 8000b2a:	00db      	lsls	r3, r3, #3
 8000b2c:	4413      	add	r3, r2
 8000b2e:	3320      	adds	r3, #32
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
	pDMAHandle->pDMAx->STREAM[pDMAHandle->DMA_stream].FCR &= ~(0xBF);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	7bdb      	ldrb	r3, [r3, #15]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	460b      	mov	r3, r1
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	440b      	add	r3, r1
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	4413      	add	r3, r2
 8000b48:	3324      	adds	r3, #36	@ 0x24
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	6811      	ldr	r1, [r2, #0]
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	7bd2      	ldrb	r2, [r2, #15]
 8000b54:	4610      	mov	r0, r2
 8000b56:	f023 02bf 	bic.w	r2, r3, #191	@ 0xbf
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	4403      	add	r3, r0
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	440b      	add	r3, r1
 8000b64:	3324      	adds	r3, #36	@ 0x24
 8000b66:	601a      	str	r2, [r3, #0]

	uint32_t cr_temp = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
	cr_temp |= ( pDMAHandle->DMA_Config.DMA_Channel << 25 );
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	791b      	ldrb	r3, [r3, #4]
 8000b70:	065b      	lsls	r3, r3, #25
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]
	cr_temp |= ( pDMAHandle->DMA_Config.DMA_Priority << 16 );
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	799b      	ldrb	r3, [r3, #6]
 8000b7c:	041b      	lsls	r3, r3, #16
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
	cr_temp |= ( pDMAHandle->DMA_Config.DMA_MemDataSize << 13 );
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	79db      	ldrb	r3, [r3, #7]
 8000b88:	035b      	lsls	r3, r3, #13
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]
	cr_temp |= ( pDMAHandle->DMA_Config.DMA_PeriphDataSize << 11 );
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	7a1b      	ldrb	r3, [r3, #8]
 8000b94:	02db      	lsls	r3, r3, #11
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]
	cr_temp |= ( pDMAHandle->DMA_Config.DMA_MemInc << 10 );
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	7a5b      	ldrb	r3, [r3, #9]
 8000ba0:	029b      	lsls	r3, r3, #10
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
	cr_temp |= ( pDMAHandle->DMA_Config.DMA_PeriphInc << 9 );
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	7a9b      	ldrb	r3, [r3, #10]
 8000bac:	025b      	lsls	r3, r3, #9
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]
	cr_temp |= ( pDMAHandle->DMA_Config.DMA_Mode << 8 );
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	7adb      	ldrb	r3, [r3, #11]
 8000bb8:	021b      	lsls	r3, r3, #8
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	60fb      	str	r3, [r7, #12]
	cr_temp |= ( pDMAHandle->DMA_Config.DMA_Direction << 6 );
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	795b      	ldrb	r3, [r3, #5]
 8000bc4:	019b      	lsls	r3, r3, #6
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
	cr_temp |= ( pDMAHandle->DMA_Config.DMA_TransferIT << 4 );
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	7b1b      	ldrb	r3, [r3, #12]
 8000bd0:	011b      	lsls	r3, r3, #4
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]

	pDMAHandle->pDMAx->STREAM[pDMAHandle->DMA_stream].CR |= cr_temp;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	7bdb      	ldrb	r3, [r3, #15]
 8000be0:	4619      	mov	r1, r3
 8000be2:	460b      	mov	r3, r1
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	440b      	add	r3, r1
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	4413      	add	r3, r2
 8000bec:	3310      	adds	r3, #16
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6819      	ldr	r1, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	7bdb      	ldrb	r3, [r3, #15]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	431a      	orrs	r2, r3
 8000bfe:	4603      	mov	r3, r0
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4403      	add	r3, r0
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	440b      	add	r3, r1
 8000c08:	3310      	adds	r3, #16
 8000c0a:	601a      	str	r2, [r3, #0]

	uint32_t fcr_temp = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
	fcr_temp |= ( pDMAHandle->DMA_Config.DMA_FIFOMode << 2);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	7b5b      	ldrb	r3, [r3, #13]
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	60bb      	str	r3, [r7, #8]
	fcr_temp |= ( pDMAHandle->DMA_Config.DMA_FIFOThreshold << 0);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	7b9b      	ldrb	r3, [r3, #14]
 8000c20:	461a      	mov	r2, r3
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]

	pDMAHandle->pDMAx->STREAM[pDMAHandle->DMA_stream].FCR |= fcr_temp;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	7bdb      	ldrb	r3, [r3, #15]
 8000c30:	4619      	mov	r1, r3
 8000c32:	460b      	mov	r3, r1
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	440b      	add	r3, r1
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	4413      	add	r3, r2
 8000c3c:	3324      	adds	r3, #36	@ 0x24
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6819      	ldr	r1, [r3, #0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	7bdb      	ldrb	r3, [r3, #15]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	431a      	orrs	r2, r3
 8000c4e:	4603      	mov	r3, r0
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	4403      	add	r3, r0
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	440b      	add	r3, r1
 8000c58:	3324      	adds	r3, #36	@ 0x24
 8000c5a:	601a      	str	r2, [r3, #0]

	pDMAHandle->pDMAx->STREAM[pDMAHandle->DMA_stream].NDTR |= (pDMAHandle->BufferSize << 0);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	7bdb      	ldrb	r3, [r3, #15]
 8000c64:	4619      	mov	r1, r3
 8000c66:	460b      	mov	r3, r1
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	440b      	add	r3, r1
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	4413      	add	r3, r2
 8000c70:	3314      	adds	r3, #20
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	8b12      	ldrh	r2, [r2, #24]
 8000c78:	4614      	mov	r4, r2
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	6811      	ldr	r1, [r2, #0]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	7bd2      	ldrb	r2, [r2, #15]
 8000c82:	4610      	mov	r0, r2
 8000c84:	ea43 0204 	orr.w	r2, r3, r4
 8000c88:	4603      	mov	r3, r0
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	4403      	add	r3, r0
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	440b      	add	r3, r1
 8000c92:	3314      	adds	r3, #20
 8000c94:	601a      	str	r2, [r3, #0]
}
 8000c96:	bf00      	nop
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd90      	pop	{r4, r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	f0100000 	.word	0xf0100000

08000ca4 <DMA_StartTransfer>:
 *
 * @Note			- none
 *
 * */
void DMA_StartTransfer(DMA_Handle_t *pDMAHandle)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	pDMAHandle->pDMAx->STREAM[pDMAHandle->DMA_stream].CR |= ( 1 << 0);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	7bdb      	ldrb	r3, [r3, #15]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	440b      	add	r3, r1
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	3310      	adds	r3, #16
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	6811      	ldr	r1, [r2, #0]
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	7bd2      	ldrb	r2, [r2, #15]
 8000ccc:	4610      	mov	r0, r2
 8000cce:	f043 0201 	orr.w	r2, r3, #1
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	4403      	add	r3, r0
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	440b      	add	r3, r1
 8000cdc:	3310      	adds	r3, #16
 8000cde:	601a      	str	r2, [r3, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <DMA_StopTransfer>:
 *
 * @Note			- none
 *
 * */
void DMA_StopTransfer(DMA_Handle_t *pDMAHandle)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	pDMAHandle->pDMAx->STREAM[pDMAHandle->DMA_stream].CR &= ~( 1<< 0);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7bdb      	ldrb	r3, [r3, #15]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	460b      	mov	r3, r1
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	440b      	add	r3, r1
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	4413      	add	r3, r2
 8000d08:	3310      	adds	r3, #16
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	6811      	ldr	r1, [r2, #0]
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	7bd2      	ldrb	r2, [r2, #15]
 8000d14:	4610      	mov	r0, r2
 8000d16:	f023 0201 	bic.w	r2, r3, #1
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4403      	add	r3, r0
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	440b      	add	r3, r1
 8000d24:	3310      	adds	r3, #16
 8000d26:	601a      	str	r2, [r3, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <DMA_ClearFlags>:
 *
 * @Note			- none
 *
 * */
void DMA_ClearFlags(DMA_Handle_t *pDMAHandle)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	uint8_t stream = pDMAHandle->DMA_stream;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	7bdb      	ldrb	r3, [r3, #15]
 8000d40:	73fb      	strb	r3, [r7, #15]
	if(stream <= 3)
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d810      	bhi.n	8000d6a <DMA_ClearFlags+0x36>
	{
		pDMAHandle->pDMAx->LIFCR |= ( 0x3D << 6*stream );
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	6899      	ldr	r1, [r3, #8]
 8000d4e:	7bfa      	ldrb	r2, [r7, #15]
 8000d50:	4613      	mov	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	4413      	add	r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	461a      	mov	r2, r3
 8000d5a:	233d      	movs	r3, #61	@ 0x3d
 8000d5c:	4093      	lsls	r3, r2
 8000d5e:	461a      	mov	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	430a      	orrs	r2, r1
 8000d66:	609a      	str	r2, [r3, #8]
	}else
	{
		pDMAHandle->pDMAx->HIFCR |= ( 0x3D << 6*(stream - 4) );
	}
}
 8000d68:	e010      	b.n	8000d8c <DMA_ClearFlags+0x58>
		pDMAHandle->pDMAx->HIFCR |= ( 0x3D << 6*(stream - 4) );
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	68d9      	ldr	r1, [r3, #12]
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	1f1a      	subs	r2, r3, #4
 8000d74:	4613      	mov	r3, r2
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	4413      	add	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	233d      	movs	r3, #61	@ 0x3d
 8000d80:	4093      	lsls	r3, r2
 8000d82:	461a      	mov	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	60da      	str	r2, [r3, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <DMA_SetAddresses>:
 *
 * @Note			- none
 *
 * */
void DMA_SetAddresses(DMA_Handle_t *pDMAHandle, void *pSrc, void *pDest)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]

	pDMAHandle->pSourceAddr = (uint32_t)pSrc;
 8000da4:	68ba      	ldr	r2, [r7, #8]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	611a      	str	r2, [r3, #16]
	pDMAHandle->pDestAddr = (uint32_t)pDest;
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	615a      	str	r2, [r3, #20]

	if( !(pDMAHandle->pDMAx->STREAM[pDMAHandle->DMA_stream].CR & ( 1 << 0 )) )
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	7bdb      	ldrb	r3, [r3, #15]
 8000db8:	4619      	mov	r1, r3
 8000dba:	460b      	mov	r3, r1
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	440b      	add	r3, r1
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	4413      	add	r3, r2
 8000dc4:	3310      	adds	r3, #16
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d11c      	bne.n	8000e0a <DMA_SetAddresses+0x72>
	{
		pDMAHandle->pDMAx->STREAM[pDMAHandle->DMA_stream].PAR = pDMAHandle->pSourceAddr;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	6818      	ldr	r0, [r3, #0]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	7bdb      	ldrb	r3, [r3, #15]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	6919      	ldr	r1, [r3, #16]
 8000dde:	3201      	adds	r2, #1
 8000de0:	4613      	mov	r3, r2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4413      	add	r3, r2
 8000de6:	00db      	lsls	r3, r3, #3
 8000de8:	4403      	add	r3, r0
 8000dea:	6019      	str	r1, [r3, #0]
		pDMAHandle->pDMAx->STREAM[pDMAHandle->DMA_stream].M0AR = pDMAHandle->pDestAddr;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	6818      	ldr	r0, [r3, #0]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	7bdb      	ldrb	r3, [r3, #15]
 8000df4:	461a      	mov	r2, r3
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6959      	ldr	r1, [r3, #20]
 8000dfa:	3201      	adds	r2, #1
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4413      	add	r3, r2
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	4403      	add	r3, r0
 8000e06:	3304      	adds	r3, #4
 8000e08:	6019      	str	r1, [r3, #0]
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <GPIO_PeriClockControl>:
 *
 * @Note			- none
 *
 * */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d157      	bne.n	8000eda <GPIO_PeriClockControl+0xc2>
	{
		if (pGPIOx == GPIOA) GPIOA_PCLK_EN();
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a59      	ldr	r2, [pc, #356]	@ (8000f94 <GPIO_PeriClockControl+0x17c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d106      	bne.n	8000e40 <GPIO_PeriClockControl+0x28>
 8000e32:	4b59      	ldr	r3, [pc, #356]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	4a58      	ldr	r2, [pc, #352]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	@ 0x30
		else if (pGPIOx == GPIOE) GPIOE_PCLK_DI();
		else if (pGPIOx == GPIOF) GPIOF_PCLK_DI();
		else if (pGPIOx == GPIOG) GPIOG_PCLK_DI();
		else if (pGPIOx == GPIOH) GPIOH_PCLK_DI();
	}
}
 8000e3e:	e0a3      	b.n	8000f88 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB) GPIOB_PCLK_EN();
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a56      	ldr	r2, [pc, #344]	@ (8000f9c <GPIO_PeriClockControl+0x184>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d106      	bne.n	8000e56 <GPIO_PeriClockControl+0x3e>
 8000e48:	4b53      	ldr	r3, [pc, #332]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4c:	4a52      	ldr	r2, [pc, #328]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000e4e:	f043 0302 	orr.w	r3, r3, #2
 8000e52:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000e54:	e098      	b.n	8000f88 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC) GPIOC_PCLK_EN();
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a51      	ldr	r2, [pc, #324]	@ (8000fa0 <GPIO_PeriClockControl+0x188>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d106      	bne.n	8000e6c <GPIO_PeriClockControl+0x54>
 8000e5e:	4b4e      	ldr	r3, [pc, #312]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a4d      	ldr	r2, [pc, #308]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000e64:	f043 0304 	orr.w	r3, r3, #4
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000e6a:	e08d      	b.n	8000f88 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD) GPIOD_PCLK_EN();
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a4d      	ldr	r2, [pc, #308]	@ (8000fa4 <GPIO_PeriClockControl+0x18c>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d106      	bne.n	8000e82 <GPIO_PeriClockControl+0x6a>
 8000e74:	4b48      	ldr	r3, [pc, #288]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e78:	4a47      	ldr	r2, [pc, #284]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000e7a:	f043 0308 	orr.w	r3, r3, #8
 8000e7e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000e80:	e082      	b.n	8000f88 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE) GPIOE_PCLK_EN();
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a48      	ldr	r2, [pc, #288]	@ (8000fa8 <GPIO_PeriClockControl+0x190>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d106      	bne.n	8000e98 <GPIO_PeriClockControl+0x80>
 8000e8a:	4b43      	ldr	r3, [pc, #268]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	4a42      	ldr	r2, [pc, #264]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000e90:	f043 0310 	orr.w	r3, r3, #16
 8000e94:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000e96:	e077      	b.n	8000f88 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF) GPIOF_PCLK_EN();
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a44      	ldr	r2, [pc, #272]	@ (8000fac <GPIO_PeriClockControl+0x194>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d106      	bne.n	8000eae <GPIO_PeriClockControl+0x96>
 8000ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea4:	4a3c      	ldr	r2, [pc, #240]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000ea6:	f043 0320 	orr.w	r3, r3, #32
 8000eaa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000eac:	e06c      	b.n	8000f88 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG) GPIOG_PCLK_EN();
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a3f      	ldr	r2, [pc, #252]	@ (8000fb0 <GPIO_PeriClockControl+0x198>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d106      	bne.n	8000ec4 <GPIO_PeriClockControl+0xac>
 8000eb6:	4b38      	ldr	r3, [pc, #224]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a37      	ldr	r2, [pc, #220]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000ebc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ec2:	e061      	b.n	8000f88 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH) GPIOH_PCLK_EN();
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a3b      	ldr	r2, [pc, #236]	@ (8000fb4 <GPIO_PeriClockControl+0x19c>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d15d      	bne.n	8000f88 <GPIO_PeriClockControl+0x170>
 8000ecc:	4b32      	ldr	r3, [pc, #200]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed0:	4a31      	ldr	r2, [pc, #196]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ed6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ed8:	e056      	b.n	8000f88 <GPIO_PeriClockControl+0x170>
		if (pGPIOx == GPIOA) GPIOA_PCLK_DI();
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a2d      	ldr	r2, [pc, #180]	@ (8000f94 <GPIO_PeriClockControl+0x17c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d106      	bne.n	8000ef0 <GPIO_PeriClockControl+0xd8>
 8000ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	4a2c      	ldr	r2, [pc, #176]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000ee8:	f023 0301 	bic.w	r3, r3, #1
 8000eec:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000eee:	e04b      	b.n	8000f88 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB) GPIOB_PCLK_DI();
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a2a      	ldr	r2, [pc, #168]	@ (8000f9c <GPIO_PeriClockControl+0x184>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d106      	bne.n	8000f06 <GPIO_PeriClockControl+0xee>
 8000ef8:	4b27      	ldr	r3, [pc, #156]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efc:	4a26      	ldr	r2, [pc, #152]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000efe:	f023 0302 	bic.w	r3, r3, #2
 8000f02:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f04:	e040      	b.n	8000f88 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC) GPIOC_PCLK_DI();
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a25      	ldr	r2, [pc, #148]	@ (8000fa0 <GPIO_PeriClockControl+0x188>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d106      	bne.n	8000f1c <GPIO_PeriClockControl+0x104>
 8000f0e:	4b22      	ldr	r3, [pc, #136]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a21      	ldr	r2, [pc, #132]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000f14:	f023 0304 	bic.w	r3, r3, #4
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f1a:	e035      	b.n	8000f88 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD) GPIOD_PCLK_DI();
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a21      	ldr	r2, [pc, #132]	@ (8000fa4 <GPIO_PeriClockControl+0x18c>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d106      	bne.n	8000f32 <GPIO_PeriClockControl+0x11a>
 8000f24:	4b1c      	ldr	r3, [pc, #112]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f28:	4a1b      	ldr	r2, [pc, #108]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000f2a:	f023 0308 	bic.w	r3, r3, #8
 8000f2e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f30:	e02a      	b.n	8000f88 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE) GPIOE_PCLK_DI();
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa8 <GPIO_PeriClockControl+0x190>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d106      	bne.n	8000f48 <GPIO_PeriClockControl+0x130>
 8000f3a:	4b17      	ldr	r3, [pc, #92]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	4a16      	ldr	r2, [pc, #88]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000f40:	f023 0310 	bic.w	r3, r3, #16
 8000f44:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f46:	e01f      	b.n	8000f88 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF) GPIOF_PCLK_DI();
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a18      	ldr	r2, [pc, #96]	@ (8000fac <GPIO_PeriClockControl+0x194>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d106      	bne.n	8000f5e <GPIO_PeriClockControl+0x146>
 8000f50:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f54:	4a10      	ldr	r2, [pc, #64]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000f56:	f023 0320 	bic.w	r3, r3, #32
 8000f5a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f5c:	e014      	b.n	8000f88 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG) GPIOG_PCLK_DI();
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a13      	ldr	r2, [pc, #76]	@ (8000fb0 <GPIO_PeriClockControl+0x198>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d106      	bne.n	8000f74 <GPIO_PeriClockControl+0x15c>
 8000f66:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000f6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000f70:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f72:	e009      	b.n	8000f88 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH) GPIOH_PCLK_DI();
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb4 <GPIO_PeriClockControl+0x19c>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d105      	bne.n	8000f88 <GPIO_PeriClockControl+0x170>
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f80:	4a05      	ldr	r2, [pc, #20]	@ (8000f98 <GPIO_PeriClockControl+0x180>)
 8000f82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000f86:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020400 	.word	0x40020400
 8000fa0:	40020800 	.word	0x40020800
 8000fa4:	40020c00 	.word	0x40020c00
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40021400 	.word	0x40021400
 8000fb0:	40021800 	.word	0x40021800
 8000fb4:	40021c00 	.word	0x40021c00

08000fb8 <GPIO_Init>:
 *
 * @Note			- none
 *
 * */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b087      	sub	sp, #28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
	//1 . configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	795b      	ldrb	r3, [r3, #5]
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	d820      	bhi.n	800100e <GPIO_Init+0x56>
	{
		//the non interrupt mode
		temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	795b      	ldrb	r3, [r3, #5]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	791b      	ldrb	r3, [r3, #4]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	791b      	ldrb	r3, [r3, #4]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2103      	movs	r1, #3
 8000fec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	400a      	ands	r2, r1
 8000ffa:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6819      	ldr	r1, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	430a      	orrs	r2, r1
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	e0da      	b.n	80011c4 <GPIO_Init+0x20c>
	} else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT ){
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	795b      	ldrb	r3, [r3, #5]
 8001012:	2b04      	cmp	r3, #4
 8001014:	d117      	bne.n	8001046 <GPIO_Init+0x8e>
				EXTI->FTSR |= ( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001016:	4b5b      	ldr	r3, [pc, #364]	@ (8001184 <GPIO_Init+0x1cc>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	7912      	ldrb	r2, [r2, #4]
 800101e:	4611      	mov	r1, r2
 8001020:	2201      	movs	r2, #1
 8001022:	408a      	lsls	r2, r1
 8001024:	4611      	mov	r1, r2
 8001026:	4a57      	ldr	r2, [pc, #348]	@ (8001184 <GPIO_Init+0x1cc>)
 8001028:	430b      	orrs	r3, r1
 800102a:	60d3      	str	r3, [r2, #12]
				EXTI->RTSR &= ~( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800102c:	4b55      	ldr	r3, [pc, #340]	@ (8001184 <GPIO_Init+0x1cc>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	7912      	ldrb	r2, [r2, #4]
 8001034:	4611      	mov	r1, r2
 8001036:	2201      	movs	r2, #1
 8001038:	408a      	lsls	r2, r1
 800103a:	43d2      	mvns	r2, r2
 800103c:	4611      	mov	r1, r2
 800103e:	4a51      	ldr	r2, [pc, #324]	@ (8001184 <GPIO_Init+0x1cc>)
 8001040:	400b      	ands	r3, r1
 8001042:	6093      	str	r3, [r2, #8]
 8001044:	e035      	b.n	80010b2 <GPIO_Init+0xfa>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT ){
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	795b      	ldrb	r3, [r3, #5]
 800104a:	2b05      	cmp	r3, #5
 800104c:	d117      	bne.n	800107e <GPIO_Init+0xc6>
			EXTI->RTSR |= ( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800104e:	4b4d      	ldr	r3, [pc, #308]	@ (8001184 <GPIO_Init+0x1cc>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	7912      	ldrb	r2, [r2, #4]
 8001056:	4611      	mov	r1, r2
 8001058:	2201      	movs	r2, #1
 800105a:	408a      	lsls	r2, r1
 800105c:	4611      	mov	r1, r2
 800105e:	4a49      	ldr	r2, [pc, #292]	@ (8001184 <GPIO_Init+0x1cc>)
 8001060:	430b      	orrs	r3, r1
 8001062:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001064:	4b47      	ldr	r3, [pc, #284]	@ (8001184 <GPIO_Init+0x1cc>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	7912      	ldrb	r2, [r2, #4]
 800106c:	4611      	mov	r1, r2
 800106e:	2201      	movs	r2, #1
 8001070:	408a      	lsls	r2, r1
 8001072:	43d2      	mvns	r2, r2
 8001074:	4611      	mov	r1, r2
 8001076:	4a43      	ldr	r2, [pc, #268]	@ (8001184 <GPIO_Init+0x1cc>)
 8001078:	400b      	ands	r3, r1
 800107a:	60d3      	str	r3, [r2, #12]
 800107c:	e019      	b.n	80010b2 <GPIO_Init+0xfa>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT ){
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	795b      	ldrb	r3, [r3, #5]
 8001082:	2b06      	cmp	r3, #6
 8001084:	d115      	bne.n	80010b2 <GPIO_Init+0xfa>
			EXTI->RTSR |= ( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001086:	4b3f      	ldr	r3, [pc, #252]	@ (8001184 <GPIO_Init+0x1cc>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	7912      	ldrb	r2, [r2, #4]
 800108e:	4611      	mov	r1, r2
 8001090:	2201      	movs	r2, #1
 8001092:	408a      	lsls	r2, r1
 8001094:	4611      	mov	r1, r2
 8001096:	4a3b      	ldr	r2, [pc, #236]	@ (8001184 <GPIO_Init+0x1cc>)
 8001098:	430b      	orrs	r3, r1
 800109a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800109c:	4b39      	ldr	r3, [pc, #228]	@ (8001184 <GPIO_Init+0x1cc>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	7912      	ldrb	r2, [r2, #4]
 80010a4:	4611      	mov	r1, r2
 80010a6:	2201      	movs	r2, #1
 80010a8:	408a      	lsls	r2, r1
 80010aa:	4611      	mov	r1, r2
 80010ac:	4a35      	ldr	r2, [pc, #212]	@ (8001184 <GPIO_Init+0x1cc>)
 80010ae:	430b      	orrs	r3, r1
 80010b0:	60d3      	str	r3, [r2, #12]
		}
		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	791b      	ldrb	r3, [r3, #4]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	791b      	ldrb	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a2f      	ldr	r2, [pc, #188]	@ (8001188 <GPIO_Init+0x1d0>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d032      	beq.n	8001134 <GPIO_Init+0x17c>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a2e      	ldr	r2, [pc, #184]	@ (800118c <GPIO_Init+0x1d4>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d02b      	beq.n	8001130 <GPIO_Init+0x178>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a2c      	ldr	r2, [pc, #176]	@ (8001190 <GPIO_Init+0x1d8>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d024      	beq.n	800112c <GPIO_Init+0x174>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001194 <GPIO_Init+0x1dc>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d01d      	beq.n	8001128 <GPIO_Init+0x170>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a29      	ldr	r2, [pc, #164]	@ (8001198 <GPIO_Init+0x1e0>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d016      	beq.n	8001124 <GPIO_Init+0x16c>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a28      	ldr	r2, [pc, #160]	@ (800119c <GPIO_Init+0x1e4>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d00f      	beq.n	8001120 <GPIO_Init+0x168>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a26      	ldr	r2, [pc, #152]	@ (80011a0 <GPIO_Init+0x1e8>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d008      	beq.n	800111c <GPIO_Init+0x164>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a25      	ldr	r2, [pc, #148]	@ (80011a4 <GPIO_Init+0x1ec>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d101      	bne.n	8001118 <GPIO_Init+0x160>
 8001114:	2307      	movs	r3, #7
 8001116:	e00e      	b.n	8001136 <GPIO_Init+0x17e>
 8001118:	2300      	movs	r3, #0
 800111a:	e00c      	b.n	8001136 <GPIO_Init+0x17e>
 800111c:	2306      	movs	r3, #6
 800111e:	e00a      	b.n	8001136 <GPIO_Init+0x17e>
 8001120:	2305      	movs	r3, #5
 8001122:	e008      	b.n	8001136 <GPIO_Init+0x17e>
 8001124:	2304      	movs	r3, #4
 8001126:	e006      	b.n	8001136 <GPIO_Init+0x17e>
 8001128:	2303      	movs	r3, #3
 800112a:	e004      	b.n	8001136 <GPIO_Init+0x17e>
 800112c:	2302      	movs	r3, #2
 800112e:	e002      	b.n	8001136 <GPIO_Init+0x17e>
 8001130:	2301      	movs	r3, #1
 8001132:	e000      	b.n	8001136 <GPIO_Init+0x17e>
 8001134:	2300      	movs	r3, #0
 8001136:	747b      	strb	r3, [r7, #17]
		SYSCFGEN_PCLK_EN();
 8001138:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <GPIO_Init+0x1f0>)
 800113a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113c:	4a1a      	ldr	r2, [pc, #104]	@ (80011a8 <GPIO_Init+0x1f0>)
 800113e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001142:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] |= (portcode << (temp2*4));
 8001144:	4a19      	ldr	r2, [pc, #100]	@ (80011ac <GPIO_Init+0x1f4>)
 8001146:	7cfb      	ldrb	r3, [r7, #19]
 8001148:	3302      	adds	r3, #2
 800114a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800114e:	7c79      	ldrb	r1, [r7, #17]
 8001150:	7cbb      	ldrb	r3, [r7, #18]
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	fa01 f303 	lsl.w	r3, r1, r3
 8001158:	4618      	mov	r0, r3
 800115a:	4914      	ldr	r1, [pc, #80]	@ (80011ac <GPIO_Init+0x1f4>)
 800115c:	7cfb      	ldrb	r3, [r7, #19]
 800115e:	4302      	orrs	r2, r0
 8001160:	3302      	adds	r3, #2
 8001162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//3. enable de exti interrupt delivery
		EXTI->IMR |= ( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001166:	4b07      	ldr	r3, [pc, #28]	@ (8001184 <GPIO_Init+0x1cc>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	7912      	ldrb	r2, [r2, #4]
 800116e:	4611      	mov	r1, r2
 8001170:	2201      	movs	r2, #1
 8001172:	408a      	lsls	r2, r1
 8001174:	4611      	mov	r1, r2
 8001176:	4a03      	ldr	r2, [pc, #12]	@ (8001184 <GPIO_Init+0x1cc>)
 8001178:	430b      	orrs	r3, r1
 800117a:	6013      	str	r3, [r2, #0]
		for(__vo uint16_t i = 0; i<1000; i++);
 800117c:	2300      	movs	r3, #0
 800117e:	81bb      	strh	r3, [r7, #12]
 8001180:	e01b      	b.n	80011ba <GPIO_Init+0x202>
 8001182:	bf00      	nop
 8001184:	40013c00 	.word	0x40013c00
 8001188:	40020000 	.word	0x40020000
 800118c:	40020400 	.word	0x40020400
 8001190:	40020800 	.word	0x40020800
 8001194:	40020c00 	.word	0x40020c00
 8001198:	40021000 	.word	0x40021000
 800119c:	40021400 	.word	0x40021400
 80011a0:	40021800 	.word	0x40021800
 80011a4:	40021c00 	.word	0x40021c00
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40013800 	.word	0x40013800
 80011b0:	89bb      	ldrh	r3, [r7, #12]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	3301      	adds	r3, #1
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	81bb      	strh	r3, [r7, #12]
 80011ba:	89bb      	ldrh	r3, [r7, #12]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011c2:	d3f5      	bcc.n	80011b0 <GPIO_Init+0x1f8>
	}
	temp = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
	//2. configure the speed
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	799b      	ldrb	r3, [r3, #6]
 80011cc:	461a      	mov	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	791b      	ldrb	r3, [r3, #4]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));		//clearing
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	791b      	ldrb	r3, [r3, #4]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2103      	movs	r1, #3
 80011e8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	4619      	mov	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	400a      	ands	r2, r1
 80011f6:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;	//setting
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6899      	ldr	r1, [r3, #8]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	430a      	orrs	r2, r1
 8001206:	609a      	str	r2, [r3, #8]
	temp = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
	//3. configure the pupd settings
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	79db      	ldrb	r3, [r3, #7]
 8001210:	461a      	mov	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	791b      	ldrb	r3, [r3, #4]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << (2 *  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	791b      	ldrb	r3, [r3, #4]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	2103      	movs	r1, #3
 800122c:	fa01 f303 	lsl.w	r3, r1, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	4619      	mov	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	400a      	ands	r2, r1
 800123a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;		//setting
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	68d9      	ldr	r1, [r3, #12]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	430a      	orrs	r2, r1
 800124a:	60da      	str	r2, [r3, #12]
	temp = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
	//4. configures the optype
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7a1b      	ldrb	r3, [r3, #8]
 8001254:	461a      	mov	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	791b      	ldrb	r3, [r3, #4]
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	791b      	ldrb	r3, [r3, #4]
 800126a:	4619      	mov	r1, r3
 800126c:	2301      	movs	r3, #1
 800126e:	408b      	lsls	r3, r1
 8001270:	43db      	mvns	r3, r3
 8001272:	4619      	mov	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	400a      	ands	r2, r1
 800127a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6859      	ldr	r1, [r3, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	430a      	orrs	r2, r1
 800128a:	605a      	str	r2, [r3, #4]
	temp = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	795b      	ldrb	r3, [r3, #5]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d135      	bne.n	8001304 <GPIO_Init+0x34c>
	{
		//configure alt functions
		uint8_t temp1 = 0, temp2 = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	743b      	strb	r3, [r7, #16]
 800129c:	2300      	movs	r3, #0
 800129e:	73fb      	strb	r3, [r7, #15]
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	791b      	ldrb	r3, [r3, #4]
 80012a4:	08db      	lsrs	r3, r3, #3
 80012a6:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	791b      	ldrb	r3, [r3, #4]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << ( 4* temp2 ));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	7c3a      	ldrb	r2, [r7, #16]
 80012b8:	3208      	adds	r2, #8
 80012ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	220f      	movs	r2, #15
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	7c3a      	ldrb	r2, [r7, #16]
 80012d2:	4001      	ands	r1, r0
 80012d4:	3208      	adds	r2, #8
 80012d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4* temp2 ));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	7c3a      	ldrb	r2, [r7, #16]
 80012e0:	3208      	adds	r2, #8
 80012e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	7a5b      	ldrb	r3, [r3, #9]
 80012ea:	461a      	mov	r2, r3
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	7c3a      	ldrb	r2, [r7, #16]
 80012fc:	4301      	orrs	r1, r0
 80012fe:	3208      	adds	r2, #8
 8001300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 8001304:	bf00      	nop
 8001306:	371c      	adds	r7, #28
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <SystemCLK_Config_84MHz>:
 * @return			- none
 *
 * @Note			- none
 */

void SystemCLK_Config_84MHz(void){
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0

    RCC->CR |= (1 << 0);
 8001316:	4b47      	ldr	r3, [pc, #284]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a46      	ldr	r2, [pc, #280]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6013      	str	r3, [r2, #0]
    while((RCC->CR & (1 << 1)) == 0); // Wait for HSIRDY
 8001322:	bf00      	nop
 8001324:	4b43      	ldr	r3, [pc, #268]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f9      	beq.n	8001324 <SystemCLK_Config_84MHz+0x14>
    for(__vo uint16_t i = 0; i<1000; i++);
 8001330:	2300      	movs	r3, #0
 8001332:	80fb      	strh	r3, [r7, #6]
 8001334:	e004      	b.n	8001340 <SystemCLK_Config_84MHz+0x30>
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	b29b      	uxth	r3, r3
 800133a:	3301      	adds	r3, #1
 800133c:	b29b      	uxth	r3, r3
 800133e:	80fb      	strh	r3, [r7, #6]
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	b29b      	uxth	r3, r3
 8001344:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001348:	d3f5      	bcc.n	8001336 <SystemCLK_Config_84MHz+0x26>
    /*PLL_M = 8; 	HSI/PLL_M
    * PLL_N= 168;	PLL_N*HSI/PLL_M
   	* PLL_P = 4;	(PLL_N*HSI/PLL_M)/PLL_P = Final_Frequency
   	*/
    RCC->PLLCFGR &=~((0x7F << 24) | (1 << 22) | (0x3 << 16) | ( 0x7FFF << 0 ));
 800134a:	4b3a      	ldr	r3, [pc, #232]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	4939      	ldr	r1, [pc, #228]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 8001350:	4b39      	ldr	r3, [pc, #228]	@ (8001438 <SystemCLK_Config_84MHz+0x128>)
 8001352:	4013      	ands	r3, r2
 8001354:	604b      	str	r3, [r1, #4]
    RCC->PLLCFGR |= (8 << 0);    // PLLM = 8
 8001356:	4b37      	ldr	r3, [pc, #220]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	4a36      	ldr	r2, [pc, #216]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 800135c:	f043 0308 	orr.w	r3, r3, #8
 8001360:	6053      	str	r3, [r2, #4]
    RCC->PLLCFGR |= (168 << 6);  // PLLN = 168
 8001362:	4b34      	ldr	r3, [pc, #208]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	4a33      	ldr	r2, [pc, #204]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 8001368:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 800136c:	6053      	str	r3, [r2, #4]
    RCC->PLLCFGR |= (1 << 16);   // PLLP = 4 (01 = divide by 4)
 800136e:	4b31      	ldr	r3, [pc, #196]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	4a30      	ldr	r2, [pc, #192]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 8001374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001378:	6053      	str	r3, [r2, #4]
    RCC->PLLCFGR &= ~(1 << 22);  // HSI as PLL source (bit 22 = 0)
 800137a:	4b2e      	ldr	r3, [pc, #184]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	4a2d      	ldr	r2, [pc, #180]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 8001380:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001384:	6053      	str	r3, [r2, #4]


    RCC->CR |= (1 << 24);
 8001386:	4b2b      	ldr	r3, [pc, #172]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a2a      	ldr	r2, [pc, #168]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 800138c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001390:	6013      	str	r3, [r2, #0]
    while((RCC->CR & (1 << 25)) == 0); // Wait for PLLRDY
 8001392:	bf00      	nop
 8001394:	4b27      	ldr	r3, [pc, #156]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f9      	beq.n	8001394 <SystemCLK_Config_84MHz+0x84>
    for(__vo uint16_t i = 0; i<1000; i++);
 80013a0:	2300      	movs	r3, #0
 80013a2:	80bb      	strh	r3, [r7, #4]
 80013a4:	e004      	b.n	80013b0 <SystemCLK_Config_84MHz+0xa0>
 80013a6:	88bb      	ldrh	r3, [r7, #4]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	3301      	adds	r3, #1
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	80bb      	strh	r3, [r7, #4]
 80013b0:	88bb      	ldrh	r3, [r7, #4]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013b8:	d3f5      	bcc.n	80013a6 <SystemCLK_Config_84MHz+0x96>


    FLASH->ACR |= (2 << 0);
 80013ba:	4b20      	ldr	r3, [pc, #128]	@ (800143c <SystemCLK_Config_84MHz+0x12c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a1f      	ldr	r2, [pc, #124]	@ (800143c <SystemCLK_Config_84MHz+0x12c>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6013      	str	r3, [r2, #0]


    RCC->CFGR &= ~((0xFF << 24) | (0x1FFF << 10) | ( 0xFF << 0 ));
 80013c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	491a      	ldr	r1, [pc, #104]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 80013cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001440 <SystemCLK_Config_84MHz+0x130>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	608b      	str	r3, [r1, #8]
    RCC->CFGR |= (0 << 4);
 80013d2:	4b18      	ldr	r3, [pc, #96]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 80013d4:	4a17      	ldr	r2, [pc, #92]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (4 << 10);   // APB1 = /2 (42MHz)
 80013da:	4b16      	ldr	r3, [pc, #88]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	4a15      	ldr	r2, [pc, #84]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 80013e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013e4:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (5 << 13);   // APB2 = /4 (21MHz)
 80013e6:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	4a12      	ldr	r2, [pc, #72]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 80013ec:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 80013f0:	6093      	str	r3, [r2, #8]


    RCC->CFGR |= (2 << 0);
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	6093      	str	r3, [r2, #8]
    while((RCC->CFGR & (3 << 2)) != (2 << 2)); // Wait for SWS = PLL
 80013fe:	bf00      	nop
 8001400:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <SystemCLK_Config_84MHz+0x124>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b08      	cmp	r3, #8
 800140a:	d1f9      	bne.n	8001400 <SystemCLK_Config_84MHz+0xf0>
    for(__vo uint16_t i = 0; i<1000; i++);
 800140c:	2300      	movs	r3, #0
 800140e:	807b      	strh	r3, [r7, #2]
 8001410:	e004      	b.n	800141c <SystemCLK_Config_84MHz+0x10c>
 8001412:	887b      	ldrh	r3, [r7, #2]
 8001414:	b29b      	uxth	r3, r3
 8001416:	3301      	adds	r3, #1
 8001418:	b29b      	uxth	r3, r3
 800141a:	807b      	strh	r3, [r7, #2]
 800141c:	887b      	ldrh	r3, [r7, #2]
 800141e:	b29b      	uxth	r3, r3
 8001420:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001424:	d3f5      	bcc.n	8001412 <SystemCLK_Config_84MHz+0x102>
}
 8001426:	bf00      	nop
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	40023800 	.word	0x40023800
 8001438:	80bc8000 	.word	0x80bc8000
 800143c:	40023c00 	.word	0x40023c00
 8001440:	00800300 	.word	0x00800300

08001444 <TIM_PeriClockControl>:
 *
 * @Note			- none
 *
 * */
void TIM_PeriClockControl(TIM_RegDef_t *pTIMx, uint8_t EnorDi)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	2b01      	cmp	r3, #1
 8001454:	f040 809b 	bne.w	800158e <TIM_PeriClockControl+0x14a>
	{
		if (pTIMx == TIM1) TIM1_PCLK_EN();
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a89      	ldr	r2, [pc, #548]	@ (8001680 <TIM_PeriClockControl+0x23c>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d106      	bne.n	800146e <TIM_PeriClockControl+0x2a>
 8001460:	4b88      	ldr	r3, [pc, #544]	@ (8001684 <TIM_PeriClockControl+0x240>)
 8001462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001464:	4a87      	ldr	r2, [pc, #540]	@ (8001684 <TIM_PeriClockControl+0x240>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6453      	str	r3, [r2, #68]	@ 0x44
		else if (pTIMx == TIM11) TIM11_PCLK_DI();
		else if (pTIMx == TIM12) TIM12_PCLK_DI();
		else if (pTIMx == TIM13) TIM13_PCLK_DI();
		else if (pTIMx == TIM14) TIM14_PCLK_DI();
	}
}
 800146c:	e144      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM2) TIM2_PCLK_EN();
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001474:	d106      	bne.n	8001484 <TIM_PeriClockControl+0x40>
 8001476:	4b83      	ldr	r3, [pc, #524]	@ (8001684 <TIM_PeriClockControl+0x240>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	4a82      	ldr	r2, [pc, #520]	@ (8001684 <TIM_PeriClockControl+0x240>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001482:	e139      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM3) TIM3_PCLK_EN();
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a80      	ldr	r2, [pc, #512]	@ (8001688 <TIM_PeriClockControl+0x244>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d106      	bne.n	800149a <TIM_PeriClockControl+0x56>
 800148c:	4b7d      	ldr	r3, [pc, #500]	@ (8001684 <TIM_PeriClockControl+0x240>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	4a7c      	ldr	r2, [pc, #496]	@ (8001684 <TIM_PeriClockControl+0x240>)
 8001492:	f043 0302 	orr.w	r3, r3, #2
 8001496:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001498:	e12e      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM4) TIM4_PCLK_EN();
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a7b      	ldr	r2, [pc, #492]	@ (800168c <TIM_PeriClockControl+0x248>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d106      	bne.n	80014b0 <TIM_PeriClockControl+0x6c>
 80014a2:	4b78      	ldr	r3, [pc, #480]	@ (8001684 <TIM_PeriClockControl+0x240>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	4a77      	ldr	r2, [pc, #476]	@ (8001684 <TIM_PeriClockControl+0x240>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80014ae:	e123      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM5) TIM5_PCLK_EN();
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a77      	ldr	r2, [pc, #476]	@ (8001690 <TIM_PeriClockControl+0x24c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d106      	bne.n	80014c6 <TIM_PeriClockControl+0x82>
 80014b8:	4b72      	ldr	r3, [pc, #456]	@ (8001684 <TIM_PeriClockControl+0x240>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014bc:	4a71      	ldr	r2, [pc, #452]	@ (8001684 <TIM_PeriClockControl+0x240>)
 80014be:	f043 0308 	orr.w	r3, r3, #8
 80014c2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80014c4:	e118      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM6) TIM6_PCLK_EN();
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a72      	ldr	r2, [pc, #456]	@ (8001694 <TIM_PeriClockControl+0x250>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d106      	bne.n	80014dc <TIM_PeriClockControl+0x98>
 80014ce:	4b6d      	ldr	r3, [pc, #436]	@ (8001684 <TIM_PeriClockControl+0x240>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	4a6c      	ldr	r2, [pc, #432]	@ (8001684 <TIM_PeriClockControl+0x240>)
 80014d4:	f043 0310 	orr.w	r3, r3, #16
 80014d8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80014da:	e10d      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM7) TIM7_PCLK_EN();
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a6e      	ldr	r2, [pc, #440]	@ (8001698 <TIM_PeriClockControl+0x254>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d106      	bne.n	80014f2 <TIM_PeriClockControl+0xae>
 80014e4:	4b67      	ldr	r3, [pc, #412]	@ (8001684 <TIM_PeriClockControl+0x240>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e8:	4a66      	ldr	r2, [pc, #408]	@ (8001684 <TIM_PeriClockControl+0x240>)
 80014ea:	f043 0320 	orr.w	r3, r3, #32
 80014ee:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80014f0:	e102      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM8) TIM8_PCLK_EN();
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a69      	ldr	r2, [pc, #420]	@ (800169c <TIM_PeriClockControl+0x258>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d106      	bne.n	8001508 <TIM_PeriClockControl+0xc4>
 80014fa:	4b62      	ldr	r3, [pc, #392]	@ (8001684 <TIM_PeriClockControl+0x240>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	4a61      	ldr	r2, [pc, #388]	@ (8001684 <TIM_PeriClockControl+0x240>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8001506:	e0f7      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM9) TIM9_PCLK_EN();
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a65      	ldr	r2, [pc, #404]	@ (80016a0 <TIM_PeriClockControl+0x25c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d106      	bne.n	800151e <TIM_PeriClockControl+0xda>
 8001510:	4b5c      	ldr	r3, [pc, #368]	@ (8001684 <TIM_PeriClockControl+0x240>)
 8001512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001514:	4a5b      	ldr	r2, [pc, #364]	@ (8001684 <TIM_PeriClockControl+0x240>)
 8001516:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800151a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800151c:	e0ec      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM10) TIM10_PCLK_EN();
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a60      	ldr	r2, [pc, #384]	@ (80016a4 <TIM_PeriClockControl+0x260>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d106      	bne.n	8001534 <TIM_PeriClockControl+0xf0>
 8001526:	4b57      	ldr	r3, [pc, #348]	@ (8001684 <TIM_PeriClockControl+0x240>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152a:	4a56      	ldr	r2, [pc, #344]	@ (8001684 <TIM_PeriClockControl+0x240>)
 800152c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001530:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8001532:	e0e1      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM11) TIM11_PCLK_EN();
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a5c      	ldr	r2, [pc, #368]	@ (80016a8 <TIM_PeriClockControl+0x264>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d106      	bne.n	800154a <TIM_PeriClockControl+0x106>
 800153c:	4b51      	ldr	r3, [pc, #324]	@ (8001684 <TIM_PeriClockControl+0x240>)
 800153e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001540:	4a50      	ldr	r2, [pc, #320]	@ (8001684 <TIM_PeriClockControl+0x240>)
 8001542:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001546:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8001548:	e0d6      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM12) TIM12_PCLK_EN();
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a57      	ldr	r2, [pc, #348]	@ (80016ac <TIM_PeriClockControl+0x268>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d106      	bne.n	8001560 <TIM_PeriClockControl+0x11c>
 8001552:	4b4c      	ldr	r3, [pc, #304]	@ (8001684 <TIM_PeriClockControl+0x240>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	4a4b      	ldr	r2, [pc, #300]	@ (8001684 <TIM_PeriClockControl+0x240>)
 8001558:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800155c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800155e:	e0cb      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM13) TIM13_PCLK_EN();
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a53      	ldr	r2, [pc, #332]	@ (80016b0 <TIM_PeriClockControl+0x26c>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d106      	bne.n	8001576 <TIM_PeriClockControl+0x132>
 8001568:	4b46      	ldr	r3, [pc, #280]	@ (8001684 <TIM_PeriClockControl+0x240>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156c:	4a45      	ldr	r2, [pc, #276]	@ (8001684 <TIM_PeriClockControl+0x240>)
 800156e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001572:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001574:	e0c0      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM14) TIM14_PCLK_EN();
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4e      	ldr	r2, [pc, #312]	@ (80016b4 <TIM_PeriClockControl+0x270>)
 800157a:	4293      	cmp	r3, r2
 800157c:	f040 80bc 	bne.w	80016f8 <TIM_PeriClockControl+0x2b4>
 8001580:	4b40      	ldr	r3, [pc, #256]	@ (8001684 <TIM_PeriClockControl+0x240>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001584:	4a3f      	ldr	r2, [pc, #252]	@ (8001684 <TIM_PeriClockControl+0x240>)
 8001586:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800158a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800158c:	e0b4      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		if (pTIMx == TIM1) TIM1_PCLK_DI();
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a3b      	ldr	r2, [pc, #236]	@ (8001680 <TIM_PeriClockControl+0x23c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d106      	bne.n	80015a4 <TIM_PeriClockControl+0x160>
 8001596:	4b3b      	ldr	r3, [pc, #236]	@ (8001684 <TIM_PeriClockControl+0x240>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159a:	4a3a      	ldr	r2, [pc, #232]	@ (8001684 <TIM_PeriClockControl+0x240>)
 800159c:	f023 0301 	bic.w	r3, r3, #1
 80015a0:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80015a2:	e0a9      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM2) TIM2_PCLK_DI();
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015aa:	d106      	bne.n	80015ba <TIM_PeriClockControl+0x176>
 80015ac:	4b35      	ldr	r3, [pc, #212]	@ (8001684 <TIM_PeriClockControl+0x240>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b0:	4a34      	ldr	r2, [pc, #208]	@ (8001684 <TIM_PeriClockControl+0x240>)
 80015b2:	f023 0301 	bic.w	r3, r3, #1
 80015b6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80015b8:	e09e      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM3) TIM3_PCLK_DI();
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a32      	ldr	r2, [pc, #200]	@ (8001688 <TIM_PeriClockControl+0x244>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d106      	bne.n	80015d0 <TIM_PeriClockControl+0x18c>
 80015c2:	4b30      	ldr	r3, [pc, #192]	@ (8001684 <TIM_PeriClockControl+0x240>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001684 <TIM_PeriClockControl+0x240>)
 80015c8:	f023 0302 	bic.w	r3, r3, #2
 80015cc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80015ce:	e093      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM4) TIM4_PCLK_DI();
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a2e      	ldr	r2, [pc, #184]	@ (800168c <TIM_PeriClockControl+0x248>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d106      	bne.n	80015e6 <TIM_PeriClockControl+0x1a2>
 80015d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001684 <TIM_PeriClockControl+0x240>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	4a29      	ldr	r2, [pc, #164]	@ (8001684 <TIM_PeriClockControl+0x240>)
 80015de:	f023 0304 	bic.w	r3, r3, #4
 80015e2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80015e4:	e088      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM5) TIM5_PCLK_DI();
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a29      	ldr	r2, [pc, #164]	@ (8001690 <TIM_PeriClockControl+0x24c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d106      	bne.n	80015fc <TIM_PeriClockControl+0x1b8>
 80015ee:	4b25      	ldr	r3, [pc, #148]	@ (8001684 <TIM_PeriClockControl+0x240>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	4a24      	ldr	r2, [pc, #144]	@ (8001684 <TIM_PeriClockControl+0x240>)
 80015f4:	f023 0308 	bic.w	r3, r3, #8
 80015f8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80015fa:	e07d      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM6) TIM6_PCLK_DI();
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a25      	ldr	r2, [pc, #148]	@ (8001694 <TIM_PeriClockControl+0x250>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d106      	bne.n	8001612 <TIM_PeriClockControl+0x1ce>
 8001604:	4b1f      	ldr	r3, [pc, #124]	@ (8001684 <TIM_PeriClockControl+0x240>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001608:	4a1e      	ldr	r2, [pc, #120]	@ (8001684 <TIM_PeriClockControl+0x240>)
 800160a:	f023 0310 	bic.w	r3, r3, #16
 800160e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001610:	e072      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM7) TIM7_PCLK_DI();
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a20      	ldr	r2, [pc, #128]	@ (8001698 <TIM_PeriClockControl+0x254>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d106      	bne.n	8001628 <TIM_PeriClockControl+0x1e4>
 800161a:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <TIM_PeriClockControl+0x240>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	4a19      	ldr	r2, [pc, #100]	@ (8001684 <TIM_PeriClockControl+0x240>)
 8001620:	f023 0320 	bic.w	r3, r3, #32
 8001624:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001626:	e067      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM8) TIM8_PCLK_DI();
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a1c      	ldr	r2, [pc, #112]	@ (800169c <TIM_PeriClockControl+0x258>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d106      	bne.n	800163e <TIM_PeriClockControl+0x1fa>
 8001630:	4b14      	ldr	r3, [pc, #80]	@ (8001684 <TIM_PeriClockControl+0x240>)
 8001632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001634:	4a13      	ldr	r2, [pc, #76]	@ (8001684 <TIM_PeriClockControl+0x240>)
 8001636:	f023 0302 	bic.w	r3, r3, #2
 800163a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800163c:	e05c      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM9) TIM9_PCLK_DI();
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a17      	ldr	r2, [pc, #92]	@ (80016a0 <TIM_PeriClockControl+0x25c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d106      	bne.n	8001654 <TIM_PeriClockControl+0x210>
 8001646:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <TIM_PeriClockControl+0x240>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164a:	4a0e      	ldr	r2, [pc, #56]	@ (8001684 <TIM_PeriClockControl+0x240>)
 800164c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001650:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8001652:	e051      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM10) TIM10_PCLK_DI();
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a13      	ldr	r2, [pc, #76]	@ (80016a4 <TIM_PeriClockControl+0x260>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d106      	bne.n	800166a <TIM_PeriClockControl+0x226>
 800165c:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <TIM_PeriClockControl+0x240>)
 800165e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001660:	4a08      	ldr	r2, [pc, #32]	@ (8001684 <TIM_PeriClockControl+0x240>)
 8001662:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001666:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8001668:	e046      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM11) TIM11_PCLK_DI();
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a0e      	ldr	r2, [pc, #56]	@ (80016a8 <TIM_PeriClockControl+0x264>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d122      	bne.n	80016b8 <TIM_PeriClockControl+0x274>
 8001672:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <TIM_PeriClockControl+0x240>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	4a03      	ldr	r2, [pc, #12]	@ (8001684 <TIM_PeriClockControl+0x240>)
 8001678:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800167c:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800167e:	e03b      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
 8001680:	40010000 	.word	0x40010000
 8001684:	40023800 	.word	0x40023800
 8001688:	40000400 	.word	0x40000400
 800168c:	40000800 	.word	0x40000800
 8001690:	40000c00 	.word	0x40000c00
 8001694:	40001000 	.word	0x40001000
 8001698:	40001400 	.word	0x40001400
 800169c:	40010400 	.word	0x40010400
 80016a0:	40014000 	.word	0x40014000
 80016a4:	40014400 	.word	0x40014400
 80016a8:	40014800 	.word	0x40014800
 80016ac:	40001800 	.word	0x40001800
 80016b0:	40001c00 	.word	0x40001c00
 80016b4:	40002000 	.word	0x40002000
		else if (pTIMx == TIM12) TIM12_PCLK_DI();
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a12      	ldr	r2, [pc, #72]	@ (8001704 <TIM_PeriClockControl+0x2c0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d106      	bne.n	80016ce <TIM_PeriClockControl+0x28a>
 80016c0:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <TIM_PeriClockControl+0x2c4>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c4:	4a10      	ldr	r2, [pc, #64]	@ (8001708 <TIM_PeriClockControl+0x2c4>)
 80016c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80016ca:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80016cc:	e014      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM13) TIM13_PCLK_DI();
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a0e      	ldr	r2, [pc, #56]	@ (800170c <TIM_PeriClockControl+0x2c8>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d106      	bne.n	80016e4 <TIM_PeriClockControl+0x2a0>
 80016d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001708 <TIM_PeriClockControl+0x2c4>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	4a0b      	ldr	r2, [pc, #44]	@ (8001708 <TIM_PeriClockControl+0x2c4>)
 80016dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80016e0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80016e2:	e009      	b.n	80016f8 <TIM_PeriClockControl+0x2b4>
		else if (pTIMx == TIM14) TIM14_PCLK_DI();
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001710 <TIM_PeriClockControl+0x2cc>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d105      	bne.n	80016f8 <TIM_PeriClockControl+0x2b4>
 80016ec:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <TIM_PeriClockControl+0x2c4>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f0:	4a05      	ldr	r2, [pc, #20]	@ (8001708 <TIM_PeriClockControl+0x2c4>)
 80016f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016f6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	40001800 	.word	0x40001800
 8001708:	40023800 	.word	0x40023800
 800170c:	40001c00 	.word	0x40001c00
 8001710:	40002000 	.word	0x40002000

08001714 <TIM_Init>:
 * @Note			- none
 *
 * */

void TIM_Init(TIM_Handle_t *pTIMHandle)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	@ 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	TIM_PeriClockControl(pTIMHandle->pTIMx, ENABLE);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2101      	movs	r1, #1
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fe8e 	bl	8001444 <TIM_PeriClockControl>
	uint32_t f_CK_PSC = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
	if((pTIMHandle->pTIMx == TIM2)||(pTIMHandle->pTIMx == TIM3)||
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001734:	d027      	beq.n	8001786 <TIM_Init+0x72>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a69      	ldr	r2, [pc, #420]	@ (80018e0 <TIM_Init+0x1cc>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d022      	beq.n	8001786 <TIM_Init+0x72>
			(pTIMHandle->pTIMx == TIM4)||(pTIMHandle->pTIMx == TIM5)||
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
	if((pTIMHandle->pTIMx == TIM2)||(pTIMHandle->pTIMx == TIM3)||
 8001744:	4a67      	ldr	r2, [pc, #412]	@ (80018e4 <TIM_Init+0x1d0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d01d      	beq.n	8001786 <TIM_Init+0x72>
			(pTIMHandle->pTIMx == TIM4)||(pTIMHandle->pTIMx == TIM5)||
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a66      	ldr	r2, [pc, #408]	@ (80018e8 <TIM_Init+0x1d4>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d018      	beq.n	8001786 <TIM_Init+0x72>
			(pTIMHandle->pTIMx == TIM6)||(pTIMHandle->pTIMx == TIM7)||
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
			(pTIMHandle->pTIMx == TIM4)||(pTIMHandle->pTIMx == TIM5)||
 8001758:	4a64      	ldr	r2, [pc, #400]	@ (80018ec <TIM_Init+0x1d8>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d013      	beq.n	8001786 <TIM_Init+0x72>
			(pTIMHandle->pTIMx == TIM6)||(pTIMHandle->pTIMx == TIM7)||
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a63      	ldr	r2, [pc, #396]	@ (80018f0 <TIM_Init+0x1dc>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d00e      	beq.n	8001786 <TIM_Init+0x72>
			(pTIMHandle->pTIMx == TIM12)||(pTIMHandle->pTIMx == TIM13)||
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
			(pTIMHandle->pTIMx == TIM6)||(pTIMHandle->pTIMx == TIM7)||
 800176c:	4a61      	ldr	r2, [pc, #388]	@ (80018f4 <TIM_Init+0x1e0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d009      	beq.n	8001786 <TIM_Init+0x72>
			(pTIMHandle->pTIMx == TIM12)||(pTIMHandle->pTIMx == TIM13)||
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a60      	ldr	r2, [pc, #384]	@ (80018f8 <TIM_Init+0x1e4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d004      	beq.n	8001786 <TIM_Init+0x72>
			(pTIMHandle->pTIMx == TIM14)){
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
			(pTIMHandle->pTIMx == TIM12)||(pTIMHandle->pTIMx == TIM13)||
 8001780:	4a5e      	ldr	r2, [pc, #376]	@ (80018fc <TIM_Init+0x1e8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d102      	bne.n	800178c <TIM_Init+0x78>

		f_CK_PSC = 84000000;
 8001786:	4b5e      	ldr	r3, [pc, #376]	@ (8001900 <TIM_Init+0x1ec>)
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
 800178a:	e001      	b.n	8001790 <TIM_Init+0x7c>

	} else{

		f_CK_PSC = 84000000;
 800178c:	4b5c      	ldr	r3, [pc, #368]	@ (8001900 <TIM_Init+0x1ec>)
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24

	}


	uint32_t InputFrequency = pTIMHandle->TIM_Config.TIM_Frequency;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	61bb      	str	r3, [r7, #24]
	//The counter clock frequency CK_CNT is equal to fCK_PSC / (PSC[15:0] + 1). (RM PG[604])
	//In upcounting mode, the counter counts from 0 to the auto-reload value
	//fCK_PSC = APB1_Timer_Clock = 84 MHz
	//FrequencyRatio = fCK_PSC/InputFrequency = (PSC + 1)(ARR + 1)
	uint32_t psc_temp = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
	uint32_t arr_temp = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
	//Max value ARR can count up to is 0xFFFF
	arr_temp = ( ( (f_CK_PSC/InputFrequency )) / (psc_temp + 1) ) - 1;
 800179e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	3301      	adds	r3, #1
 80017aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ae:	3b01      	subs	r3, #1
 80017b0:	61fb      	str	r3, [r7, #28]
	while( arr_temp > 0xFFFF ){
 80017b2:	e00c      	b.n	80017ce <TIM_Init+0xba>
		psc_temp++ ;
 80017b4:	6a3b      	ldr	r3, [r7, #32]
 80017b6:	3301      	adds	r3, #1
 80017b8:	623b      	str	r3, [r7, #32]
		arr_temp = ( ( (f_CK_PSC/InputFrequency )) / (psc_temp + 1) ) - 1;
 80017ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	fbb2 f2f3 	udiv	r2, r2, r3
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	3301      	adds	r3, #1
 80017c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ca:	3b01      	subs	r3, #1
 80017cc:	61fb      	str	r3, [r7, #28]
	while( arr_temp > 0xFFFF ){
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017d4:	d2ee      	bcs.n	80017b4 <TIM_Init+0xa0>
	}

	pTIMHandle->pTIMx->PSC = psc_temp; //Setting PSC to calculated PSC
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6a3a      	ldr	r2, [r7, #32]
 80017dc:	629a      	str	r2, [r3, #40]	@ 0x28

	pTIMHandle->pTIMx->ARR = arr_temp; //Setting ARR to calculated ARR
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	62da      	str	r2, [r3, #44]	@ 0x2c

	pTIMHandle->pTIMx->CR1 &= ~( 0x1FF << 0 ); //Clear ALL
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80017f4:	f023 0301 	bic.w	r3, r3, #1
 80017f8:	6013      	str	r3, [r2, #0]
	uint32_t cr1_temp = 0x0000;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
	cr1_temp |= (pTIMHandle->TIM_Config.TIM_CLKDivision << 8);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	7a1b      	ldrb	r3, [r3, #8]
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	4313      	orrs	r3, r2
 8001808:	617b      	str	r3, [r7, #20]
	cr1_temp |= (pTIMHandle->TIM_Config.TIM_AutoReloadPreload << 7);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	7a9b      	ldrb	r3, [r3, #10]
 800180e:	01db      	lsls	r3, r3, #7
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	4313      	orrs	r3, r2
 8001814:	617b      	str	r3, [r7, #20]
	cr1_temp |= (pTIMHandle->TIM_Config.TIM_CNTMode << 4);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	7a5b      	ldrb	r3, [r3, #9]
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	4313      	orrs	r3, r2
 8001820:	617b      	str	r3, [r7, #20]
	pTIMHandle->pTIMx->CR1 |= cr1_temp; //set register to TIMx configuration
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6819      	ldr	r1, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	430a      	orrs	r2, r1
 8001830:	601a      	str	r2, [r3, #0]
	for(__vo uint16_t j = 0; j < 5000; j++);
 8001832:	2300      	movs	r3, #0
 8001834:	827b      	strh	r3, [r7, #18]
 8001836:	e004      	b.n	8001842 <TIM_Init+0x12e>
 8001838:	8a7b      	ldrh	r3, [r7, #18]
 800183a:	b29b      	uxth	r3, r3
 800183c:	3301      	adds	r3, #1
 800183e:	b29b      	uxth	r3, r3
 8001840:	827b      	strh	r3, [r7, #18]
 8001842:	8a7b      	ldrh	r3, [r7, #18]
 8001844:	b29b      	uxth	r3, r3
 8001846:	f241 3287 	movw	r2, #4999	@ 0x1387
 800184a:	4293      	cmp	r3, r2
 800184c:	d9f4      	bls.n	8001838 <TIM_Init+0x124>
	pTIMHandle->pTIMx->CR2 &= ~( 0x1F << 3 ); //clear
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 800185c:	605a      	str	r2, [r3, #4]
	pTIMHandle->pTIMx->CR2 |= ( pTIMHandle->TIM_Config.TIM_MasterModeSel << 4 );
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6859      	ldr	r1, [r3, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	7b1b      	ldrb	r3, [r3, #12]
 8001868:	011a      	lsls	r2, r3, #4
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	605a      	str	r2, [r3, #4]
	for(__vo uint16_t j = 0; j < 50000; j++);
 8001872:	2300      	movs	r3, #0
 8001874:	823b      	strh	r3, [r7, #16]
 8001876:	e004      	b.n	8001882 <TIM_Init+0x16e>
 8001878:	8a3b      	ldrh	r3, [r7, #16]
 800187a:	b29b      	uxth	r3, r3
 800187c:	3301      	adds	r3, #1
 800187e:	b29b      	uxth	r3, r3
 8001880:	823b      	strh	r3, [r7, #16]
 8001882:	8a3b      	ldrh	r3, [r7, #16]
 8001884:	b29b      	uxth	r3, r3
 8001886:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800188a:	4293      	cmp	r3, r2
 800188c:	d9f4      	bls.n	8001878 <TIM_Init+0x164>
	if(pTIMHandle->TIM_Config.TIM_IntEnable == TIM_IT_ENABLE) pTIMHandle->pTIMx->DIER |= ( 1 << 0 );
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	7adb      	ldrb	r3, [r3, #11]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d108      	bne.n	80018a8 <TIM_Init+0x194>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f042 0201 	orr.w	r2, r2, #1
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	e007      	b.n	80018b8 <TIM_Init+0x1a4>
	else pTIMHandle->pTIMx->DIER &= ~( 1 << 0 );
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0201 	bic.w	r2, r2, #1
 80018b6:	60da      	str	r2, [r3, #12]
	for(__vo uint16_t j = 0; j < 50000; j++);
 80018b8:	2300      	movs	r3, #0
 80018ba:	81fb      	strh	r3, [r7, #14]
 80018bc:	e004      	b.n	80018c8 <TIM_Init+0x1b4>
 80018be:	89fb      	ldrh	r3, [r7, #14]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	3301      	adds	r3, #1
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	81fb      	strh	r3, [r7, #14]
 80018c8:	89fb      	ldrh	r3, [r7, #14]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d9f4      	bls.n	80018be <TIM_Init+0x1aa>
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3728      	adds	r7, #40	@ 0x28
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40000400 	.word	0x40000400
 80018e4:	40000800 	.word	0x40000800
 80018e8:	40000c00 	.word	0x40000c00
 80018ec:	40001000 	.word	0x40001000
 80018f0:	40001400 	.word	0x40001400
 80018f4:	40001800 	.word	0x40001800
 80018f8:	40001c00 	.word	0x40001c00
 80018fc:	40002000 	.word	0x40002000
 8001900:	0501bd00 	.word	0x0501bd00

08001904 <TIM_Start>:
 *
 * @Note			- none
 *
 * */
void TIM_Start(TIM_Handle_t *pTIMHandle)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	pTIMHandle->pTIMx->CR1 |= (1 << 0);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f042 0201 	orr.w	r2, r2, #1
 800191a:	601a      	str	r2, [r3, #0]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <TIM_IRQInterruptConfig>:
{
	pTIMHandle->pTIMx->CR1 &= ~(1 << 0);
}

void TIM_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	460a      	mov	r2, r1
 8001932:	71fb      	strb	r3, [r7, #7]
 8001934:	4613      	mov	r3, r2
 8001936:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 8001938:	79bb      	ldrb	r3, [r7, #6]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d133      	bne.n	80019a6 <TIM_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	2b1f      	cmp	r3, #31
 8001942:	d80a      	bhi.n	800195a <TIM_IRQInterruptConfig+0x32>
		{
			//ISER0
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8001944:	4b35      	ldr	r3, [pc, #212]	@ (8001a1c <TIM_IRQInterruptConfig+0xf4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	79fa      	ldrb	r2, [r7, #7]
 800194a:	2101      	movs	r1, #1
 800194c:	fa01 f202 	lsl.w	r2, r1, r2
 8001950:	4611      	mov	r1, r2
 8001952:	4a32      	ldr	r2, [pc, #200]	@ (8001a1c <TIM_IRQInterruptConfig+0xf4>)
 8001954:	430b      	orrs	r3, r1
 8001956:	6013      	str	r3, [r2, #0]
			//ICER2
			*NVIC_ICER2 |= ( 1 << IRQNumber % 64 );
		}
	}

}
 8001958:	e059      	b.n	8001a0e <TIM_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64)
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	2b1f      	cmp	r3, #31
 800195e:	d90f      	bls.n	8001980 <TIM_IRQInterruptConfig+0x58>
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	2b3f      	cmp	r3, #63	@ 0x3f
 8001964:	d80c      	bhi.n	8001980 <TIM_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << IRQNumber % 32 );
 8001966:	4b2e      	ldr	r3, [pc, #184]	@ (8001a20 <TIM_IRQInterruptConfig+0xf8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	79fa      	ldrb	r2, [r7, #7]
 800196c:	f002 021f 	and.w	r2, r2, #31
 8001970:	2101      	movs	r1, #1
 8001972:	fa01 f202 	lsl.w	r2, r1, r2
 8001976:	4611      	mov	r1, r2
 8001978:	4a29      	ldr	r2, [pc, #164]	@ (8001a20 <TIM_IRQInterruptConfig+0xf8>)
 800197a:	430b      	orrs	r3, r1
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	e046      	b.n	8001a0e <TIM_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber < 96)
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	2b3f      	cmp	r3, #63	@ 0x3f
 8001984:	d943      	bls.n	8001a0e <TIM_IRQInterruptConfig+0xe6>
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	2b5f      	cmp	r3, #95	@ 0x5f
 800198a:	d840      	bhi.n	8001a0e <TIM_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << IRQNumber % 64 );
 800198c:	4b25      	ldr	r3, [pc, #148]	@ (8001a24 <TIM_IRQInterruptConfig+0xfc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	79fa      	ldrb	r2, [r7, #7]
 8001992:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001996:	2101      	movs	r1, #1
 8001998:	fa01 f202 	lsl.w	r2, r1, r2
 800199c:	4611      	mov	r1, r2
 800199e:	4a21      	ldr	r2, [pc, #132]	@ (8001a24 <TIM_IRQInterruptConfig+0xfc>)
 80019a0:	430b      	orrs	r3, r1
 80019a2:	6013      	str	r3, [r2, #0]
}
 80019a4:	e033      	b.n	8001a0e <TIM_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	2b1f      	cmp	r3, #31
 80019aa:	d80a      	bhi.n	80019c2 <TIM_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 80019ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001a28 <TIM_IRQInterruptConfig+0x100>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	79fa      	ldrb	r2, [r7, #7]
 80019b2:	2101      	movs	r1, #1
 80019b4:	fa01 f202 	lsl.w	r2, r1, r2
 80019b8:	4611      	mov	r1, r2
 80019ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001a28 <TIM_IRQInterruptConfig+0x100>)
 80019bc:	430b      	orrs	r3, r1
 80019be:	6013      	str	r3, [r2, #0]
}
 80019c0:	e025      	b.n	8001a0e <TIM_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64)
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	2b1f      	cmp	r3, #31
 80019c6:	d90f      	bls.n	80019e8 <TIM_IRQInterruptConfig+0xc0>
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80019cc:	d80c      	bhi.n	80019e8 <TIM_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << IRQNumber % 32 );
 80019ce:	4b17      	ldr	r3, [pc, #92]	@ (8001a2c <TIM_IRQInterruptConfig+0x104>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	79fa      	ldrb	r2, [r7, #7]
 80019d4:	f002 021f 	and.w	r2, r2, #31
 80019d8:	2101      	movs	r1, #1
 80019da:	fa01 f202 	lsl.w	r2, r1, r2
 80019de:	4611      	mov	r1, r2
 80019e0:	4a12      	ldr	r2, [pc, #72]	@ (8001a2c <TIM_IRQInterruptConfig+0x104>)
 80019e2:	430b      	orrs	r3, r1
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e012      	b.n	8001a0e <TIM_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber < 96)
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80019ec:	d90f      	bls.n	8001a0e <TIM_IRQInterruptConfig+0xe6>
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	2b5f      	cmp	r3, #95	@ 0x5f
 80019f2:	d80c      	bhi.n	8001a0e <TIM_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << IRQNumber % 64 );
 80019f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a30 <TIM_IRQInterruptConfig+0x108>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	79fa      	ldrb	r2, [r7, #7]
 80019fa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80019fe:	2101      	movs	r1, #1
 8001a00:	fa01 f202 	lsl.w	r2, r1, r2
 8001a04:	4611      	mov	r1, r2
 8001a06:	4a0a      	ldr	r2, [pc, #40]	@ (8001a30 <TIM_IRQInterruptConfig+0x108>)
 8001a08:	430b      	orrs	r3, r1
 8001a0a:	6013      	str	r3, [r2, #0]
}
 8001a0c:	e7ff      	b.n	8001a0e <TIM_IRQInterruptConfig+0xe6>
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000e100 	.word	0xe000e100
 8001a20:	e000e104 	.word	0xe000e104
 8001a24:	e000e108 	.word	0xe000e108
 8001a28:	e000e180 	.word	0xe000e180
 8001a2c:	e000e184 	.word	0xe000e184
 8001a30:	e000e188 	.word	0xe000e188

08001a34 <TIM_IRQPriorityConfig>:
 *
 * @Note			- none
 *
 * */
void TIM_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	460a      	mov	r2, r1
 8001a3e:	71fb      	strb	r3, [r7, #7]
 8001a40:	4613      	mov	r3, r2
 8001a42:	71bb      	strb	r3, [r7, #6]
	//1. find the ipr register
	uint8_t iprx = IRQNumber / 4;
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	089b      	lsrs	r3, r3, #2
 8001a48:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED );
 8001a52:	7bbb      	ldrb	r3, [r7, #14]
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	3304      	adds	r3, #4
 8001a5a:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASE_ADDR + (iprx*4)) |= ( IRQPriority << shift_amount );
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8001a64:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	79b9      	ldrb	r1, [r7, #6]
 8001a6c:	7b7b      	ldrb	r3, [r7, #13]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	4619      	mov	r1, r3
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8001a7c:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8001a80:	430a      	orrs	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <TIM_IRQHandling>:
 *
 * @Note			- none
 *
 * */
void TIM_IRQHandling(TIM_Handle_t *pTIMHandle)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	if(pTIMHandle->pTIMx->SR & (1 <<0)) pTIMHandle->pTIMx->SR &= ~(1 << 0);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d007      	beq.n	8001ab6 <TIM_IRQHandling+0x26>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0201 	bic.w	r2, r2, #1
 8001ab4:	611a      	str	r2, [r3, #16]
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <__libc_init_array>:
 8001ac4:	b570      	push	{r4, r5, r6, lr}
 8001ac6:	4d0d      	ldr	r5, [pc, #52]	@ (8001afc <__libc_init_array+0x38>)
 8001ac8:	4c0d      	ldr	r4, [pc, #52]	@ (8001b00 <__libc_init_array+0x3c>)
 8001aca:	1b64      	subs	r4, r4, r5
 8001acc:	10a4      	asrs	r4, r4, #2
 8001ace:	2600      	movs	r6, #0
 8001ad0:	42a6      	cmp	r6, r4
 8001ad2:	d109      	bne.n	8001ae8 <__libc_init_array+0x24>
 8001ad4:	4d0b      	ldr	r5, [pc, #44]	@ (8001b04 <__libc_init_array+0x40>)
 8001ad6:	4c0c      	ldr	r4, [pc, #48]	@ (8001b08 <__libc_init_array+0x44>)
 8001ad8:	f000 f818 	bl	8001b0c <_init>
 8001adc:	1b64      	subs	r4, r4, r5
 8001ade:	10a4      	asrs	r4, r4, #2
 8001ae0:	2600      	movs	r6, #0
 8001ae2:	42a6      	cmp	r6, r4
 8001ae4:	d105      	bne.n	8001af2 <__libc_init_array+0x2e>
 8001ae6:	bd70      	pop	{r4, r5, r6, pc}
 8001ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001aec:	4798      	blx	r3
 8001aee:	3601      	adds	r6, #1
 8001af0:	e7ee      	b.n	8001ad0 <__libc_init_array+0xc>
 8001af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001af6:	4798      	blx	r3
 8001af8:	3601      	adds	r6, #1
 8001afa:	e7f2      	b.n	8001ae2 <__libc_init_array+0x1e>
 8001afc:	08001b24 	.word	0x08001b24
 8001b00:	08001b24 	.word	0x08001b24
 8001b04:	08001b24 	.word	0x08001b24
 8001b08:	08001b28 	.word	0x08001b28

08001b0c <_init>:
 8001b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b0e:	bf00      	nop
 8001b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b12:	bc08      	pop	{r3}
 8001b14:	469e      	mov	lr, r3
 8001b16:	4770      	bx	lr

08001b18 <_fini>:
 8001b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b1a:	bf00      	nop
 8001b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b1e:	bc08      	pop	{r3}
 8001b20:	469e      	mov	lr, r3
 8001b22:	4770      	bx	lr
